This is the C++ coding style guide.

File names and extensions
=========================
Header files use the extension ".h"
Source code files use the extension ".cpp" if they are compiled into a .lib or .exe, and ".tcc" if they are inlined (such as template source code)
Each file should typically contain a single class and its name should match the class name.

Projects
========
A project is a set of source files that compile into a single executable or library, or that implement a single template library.

Naming:
Projects have camelCase names, preferrably single word

Directory, namespace, output naming:
All of the source code in a project should be defined in a namespace that shares the project name. All of the source files associated with a project should be contained in a directory that shares the project name. The executable or library generated by a project should share the project name. 

Project directory structure:
Each project is contained in a directory. The directory contains a CMakeLists.txt file. The directory typically contains the following subdirectories:
* "include", for h files
* "src" for cpp files (unless the project defines a template library without cpp files)
* "tcc" for tcc files (these define implementaitons of template classes)
* "test" for cpp files that define unit tests, which are invoked via ctest

Additionally, the directory can contain a README.txt file.  

Naming
======
All names should be as descriptive as possible, within reason. Prefer whole words to abbreviations, especially if those abbreviations could be ambiguous. 
Example: GetFunctionDefinition instead of GetFuncDef

Classes, structs, and enum classes:
use PascalCase, e.g., "class MyClass {};" 

Functions, member and non-member:
use PascalCase, e.g., "int GetValue() const { return _value; }"
When possible, function names should be imperative mood verbs, e.g., "GetValue()" and "Permute()". Specifically, accessor member functions should start with "Get", e.g., "GetOutputVector()". 
A few exceptions are:
* a member functions that returns the size of an object, which can simply be "Size()"
* type conversion functions, which can start with "To", e.g., "ToString()"
* functions that return the number of elements in a collection, which can start with "Num", e.g. "NumVariables()"

Member variables:
Use "_" (underscore) followed by camelCase, e.g., "_myMemberVariable"

Template typenames: 
Use PascalCase and add the suffix "Type", e.g., "template <typename SparseVectorType>"

File structure
==============
All source code files should start with a header that specifies project name, file name, and author list (see example below)

h files should indicate "#pragma once" immediately after the header

Next, indicate all "#include" statements. First, include files from the local project. Second, include files from other projects, grouping by project and adding the project name as a comment. Finally, include standard libraries.

******** begin example ********
//////////////////////////////////////////////////////////////////////////////////////////////////// 
// 
//  Project:  [projectName]
//  File:     FileName.h (libraryName)
//  Authors:  Malcolm Smith
//            Von Miller
//
//  [copyright]
//
//////////////////////////////////////////////////////////////////////////////////////////////////// 

#pragma once

#include "OtherClassFromThisProject.h"

// foo
#include "ClassFromProjectFoo.h"
#include "AnotherClassFromProjectFoo.h"

// bar
#include "ClassFromProjectBar.h"

// stl
#include <vector>
#include <string>
******** end example ********


Setting up Automineer
=====================
Doc Style -> Quick Setup: (0) Next (1) Document XML (2) TripleSlash(Plain) (3)  Symmetric left-aligned text (4) Tabular for the entire group inline end tag
Doc Style -> enforce blank lines 1 before and 0 below
Doc Formatting -> between the tag and the entry text insert a space
Doc General -> change User Name to you full name
Doc General -> uncheck add author entries
Doc General -> uncheck ad date emtries
Doc General -> check suppress brief tag
Doc Advanced:

		<!-- File Header: Catch-all plain-text Atomineer headers. See below for other examples -->
		<file>
			//////////////////////////////////////////////////////////////////////////////////////////////////// 
			// 
			//  Project:  [projectName]
			//  File:     %leafname%%extension% (%project%)
			//  Authors:  %user%
			//
			//  [copyright]
			//
			//////////////////////////////////////////////////////////////////////////////////////////////////// 
			
		</file>





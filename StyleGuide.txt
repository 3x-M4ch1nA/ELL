This is the C++ coding style guide for the Bonasi project.

Directory and Project Structure
===============================
A project is a set of files that compile into a single executable or library, or that implement a single template library. All of the source code in a project should be contained in a namespace that shares the project name. The executable or library generated by a project should share the project name. Each project should be contained in a directory, whose name matches the project. In this directory, there should be subdirectories named "include", for h files, "src" for cpp files, and "tcc" for tcc files. Additionally, the directory can contain project files for visual studio or CMake and a README.txt file.  

Naming
======
All names should be as descriptive as possible, within reason. Prefer whole words to abbreviations, especially if those abbreviations could be ambiguous. 

file names: header files use the extension ".h". Source code files use the extension ".cpp" if they are compiled into a .lib or .exe, and ".tcc" if they are inlined (such as template source code)

project, directory, executable, namespace names: use camelCase, but try to keep these names to a single word. The directory, the project it contains, the namespace of the entire project, and the executable or library is creates should all share the same name. 

class and struct names: use PascalCase, e.g., "class MyClass {};" 

member and non-member function names: 
use PascalCase, e.g., "int GetValue() const { return _value; }"
When possible, function names should be imperative mood verbs, e.g., "GetValue()" and "Permute()". As a special case, accessor member functions should start with "Get". An exception is type conversion functions, which should start with "To", e.g., "ToString()".

function parameters and local variable names: use camelCase, e.g., "currentValue". For mathematical programming, one could use "u", "v", "w", "x", "y", "z" for vectors or scalars, and "A", "B", "M" (or other capital single letters) for matrices.

member variable names: use "_" (underscore) followed by camelCase, e.g., "_myMemberVariable"

template typenames: use PascalCase and add the suffix "Type", e.g., "template <typename SparseVectorType>"

File Structure
==============
All code files should start with "// <filename>" on the top line.

Next, h files should indicate "#pragma once" 

Next, put all "#include" statements. First, include files from the local project. Second, include files from other project. Finally, include standard libraries. After each include command, add the corresponding "using" commands. Avoid using an entire namespace when possible 

******** begin example ********

// MyClass.h

#pragma once

#include "OtherClassFromThisProject.h"

#include "ClassFromAnotherProject.h"

#include <vector>
using std::vector;
using std::pair;

#include <string>
using std::string;

******** end example ********



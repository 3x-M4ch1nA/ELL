
/*
  THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
*/

//----------------------------------------------------------------------------------
// Definitions from utility libraries that are not in the SWIG XML file.
//----------------------------------------------------------------------------------

export class CommandLineParser {}
export class CommandLineParseResult {}
export class ostream {}
export class XMLDeserializer {}
export class XMLSerializer {}

export class StlIterator<T,U> {
    IsValid(): boolean;
    HasSize(): boolean;
    NumIteratesLeft(): number;
    Next(): void;
    Get(): T;
}

export class StdVector<T> {
    constructor();
    constructor(count: number);
    size(): number;
    capacity(): number;
    reserve(count: number): void;
    empty(): boolean;
    clear(): void;
    add(val: T): void;
    get(index: number): T;
    set(index: number, val: T): void;
}

export class RowDataset<T> {
    // fill me in
}

export class Iterator extends StlIterator<any,any> { 
    // For now, I'm translating Iterators in a weakly typed way.
    // If we feel it's important we could put in the work to 
    // translate C++ templates properly to preserve strong typing.
}

export class StringVector extends StdVector<string> {}

export class FeatureMap {
    // fill me in
}

export class SupervisedExample<T> {
    // fill me in
}

export class SparseDataVector<T,U> {
    // fill me in
}

export class CompressedIntegerList {
    // fill me in
}

export class vector<T> {
    // fill me in
}

export class TypeFactory<T> {
    // fill me in
}

export class AnyIterator<T> {
    // fill me in
}

export type unique_ptr<T> = T; // Is this right?
export type shared_ptr<T> = T; // Is this right?

//----------------------------------------------------------------------------------
// Translated definitions below. 
// (The id comments allow traceability back to the SWIG XML file.)
//----------------------------------------------------------------------------------



// skipping template initializer_list id:72



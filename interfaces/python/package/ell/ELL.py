# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ELL')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ELL')
    _ELL = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ELL', [dirname(__file__)])
        except ImportError:
            import _ELL
            return _ELL
        try:
            _mod = imp.load_module('_ELL', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ELL = swig_import_helper()
    del swig_import_helper
else:
    import _ELL
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ELL.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _ELL.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _ELL.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _ELL.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ELL.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ELL.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _ELL.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _ELL.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _ELL.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _ELL.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ELL.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ELL.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ELL.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ELL.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ELL.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ELL.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ELL.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ELL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector___bool__(self)


    def __len__(self) -> "std::vector< double >::size_type":
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector___len__(self)


    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _ELL.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _ELL.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _ELL.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _ELL.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector___setitem__(self, *args)


    def pop(self) -> "std::vector< double >::value_type":
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_pop(self)


    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_empty(self)


    def size(self) -> "std::vector< double >::size_type":
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_size(self)


    def swap(self, v: 'DoubleVector') -> "void":
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _ELL.DoubleVector_swap(self, v)


    def begin(self) -> "std::vector< double >::iterator":
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_begin(self)


    def end(self) -> "std::vector< double >::iterator":
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_end(self)


    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_rbegin(self)


    def rend(self) -> "std::vector< double >::reverse_iterator":
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_rend(self)


    def clear(self) -> "void":
        """
        clear(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_clear(self)


    def get_allocator(self) -> "std::vector< double >::allocator_type":
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _ELL.DoubleVector_pop_back(self)


    def erase(self, *args) -> "std::vector< double >::iterator":
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _ELL.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _ELL.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector_push_back(self, x)


    def front(self) -> "std::vector< double >::value_type const &":
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_front(self)


    def back(self) -> "std::vector< double >::value_type const &":
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_back(self)


    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _ELL.DoubleVector_insert(self, *args)


    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _ELL.DoubleVector_reserve(self, n)


    def capacity(self) -> "std::vector< double >::size_type":
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _ELL.DoubleVector_capacity(self)

    __swig_destroy__ = _ELL.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _ELL.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(DoubleVectorVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector___bool__(self)


    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        """
        __len__(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        """
        __getslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> DoubleVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _ELL.DoubleVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, DoubleVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _ELL.DoubleVectorVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< double > >::difference_type', j: 'std::vector< std::vector< double > >::difference_type') -> "void":
        """
        __delslice__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _ELL.DoubleVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.DoubleVectorVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        """
        __getitem__(DoubleVectorVector self, PySliceObject * slice) -> DoubleVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i) -> DoubleVector

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _ELL.DoubleVectorVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleVectorVector self, PySliceObject * slice, DoubleVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(DoubleVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVectorVector self, std::vector< std::vector< double > >::difference_type i, DoubleVector x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        """
        pop(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_pop(self)


    def append(self, x: 'DoubleVector') -> "void":
        """
        append(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(DoubleVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_empty(self)


    def size(self) -> "std::vector< std::vector< double > >::size_type":
        """
        size(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_size(self)


    def swap(self, v: 'DoubleVectorVector') -> "void":
        """
        swap(DoubleVectorVector self, DoubleVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _ELL.DoubleVectorVector_swap(self, v)


    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        """
        begin(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_begin(self)


    def end(self) -> "std::vector< std::vector< double > >::iterator":
        """
        end(DoubleVectorVector self) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_end(self)


    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """
        rbegin(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_rbegin(self)


    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        """
        rend(DoubleVectorVector self) -> std::vector< std::vector< double > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_rend(self)


    def clear(self) -> "void":
        """
        clear(DoubleVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        """
        get_allocator(DoubleVectorVector self) -> std::vector< std::vector< double > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(DoubleVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< double > > *

        """
        return _ELL.DoubleVectorVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        """
        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(DoubleVectorVector self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _ELL.DoubleVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(double)>)> self) -> DoubleVectorVector
        __init__(std::vector<(std::vector<(double)>)> self, DoubleVectorVector arg2) -> DoubleVectorVector

        Parameters
        ----------
        arg2: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(std::vector<(std::vector<(double)>)> self, std::vector< std::vector< double > >::size_type size, DoubleVector value) -> DoubleVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        this = _ELL.new_DoubleVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DoubleVector') -> "void":
        """
        push_back(DoubleVectorVector self, DoubleVector x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector_push_back(self, x)


    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        """
        front(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_front(self)


    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        """
        back(DoubleVectorVector self) -> DoubleVector

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_back(self)


    def assign(self, n: 'std::vector< std::vector< double > >::size_type', x: 'DoubleVector') -> "void":
        """
        assign(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(DoubleVectorVector self, std::vector< std::vector< double > >::size_type new_size, DoubleVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, DoubleVector x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(DoubleVectorVector self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, DoubleVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _ELL.DoubleVectorVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< double > >::size_type') -> "void":
        """
        reserve(DoubleVectorVector self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _ELL.DoubleVectorVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        """
        capacity(DoubleVectorVector self) -> std::vector< std::vector< double > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< double > > const *

        """
        return _ELL.DoubleVectorVector_capacity(self)

    __swig_destroy__ = _ELL.delete_DoubleVectorVector
    __del__ = lambda self: None
DoubleVectorVector_swigregister = _ELL.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class FloatVector(_object):
    """Proxy of C++ std::vector<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(FloatVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector___bool__(self)


    def __len__(self) -> "std::vector< float >::size_type":
        """
        __len__(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector___len__(self)


    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        """
        __getslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> FloatVector

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _ELL.FloatVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, FloatVector v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _ELL.FloatVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        """
        __delslice__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _ELL.FloatVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(FloatVector self, std::vector< float >::difference_type i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.FloatVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        """
        __getitem__(FloatVector self, PySliceObject * slice) -> FloatVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVector self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _ELL.FloatVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(FloatVector self, PySliceObject * slice, FloatVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(FloatVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVector self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector___setitem__(self, *args)


    def pop(self) -> "std::vector< float >::value_type":
        """
        pop(FloatVector self) -> std::vector< float >::value_type

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_pop(self)


    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        """
        append(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(FloatVector self) -> bool

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_empty(self)


    def size(self) -> "std::vector< float >::size_type":
        """
        size(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_size(self)


    def swap(self, v: 'FloatVector') -> "void":
        """
        swap(FloatVector self, FloatVector v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _ELL.FloatVector_swap(self, v)


    def begin(self) -> "std::vector< float >::iterator":
        """
        begin(FloatVector self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_begin(self)


    def end(self) -> "std::vector< float >::iterator":
        """
        end(FloatVector self) -> std::vector< float >::iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_end(self)


    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        """
        rbegin(FloatVector self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_rbegin(self)


    def rend(self) -> "std::vector< float >::reverse_iterator":
        """
        rend(FloatVector self) -> std::vector< float >::reverse_iterator

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_rend(self)


    def clear(self) -> "void":
        """
        clear(FloatVector self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_clear(self)


    def get_allocator(self) -> "std::vector< float >::allocator_type":
        """
        get_allocator(FloatVector self) -> std::vector< float >::allocator_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(FloatVector self)

        Parameters
        ----------
        self: std::vector< float > *

        """
        return _ELL.FloatVector_pop_back(self)


    def erase(self, *args) -> "std::vector< float >::iterator":
        """
        erase(FloatVector self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(FloatVector self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _ELL.FloatVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> FloatVector
        __init__(std::vector<(float)> self, FloatVector arg2) -> FloatVector

        Parameters
        ----------
        arg2: std::vector< float > const &

        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> FloatVector

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        this = _ELL.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        """
        push_back(FloatVector self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector_push_back(self, x)


    def front(self) -> "std::vector< float >::value_type const &":
        """
        front(FloatVector self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_front(self)


    def back(self) -> "std::vector< float >::value_type const &":
        """
        back(FloatVector self) -> std::vector< float >::value_type const &

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_back(self)


    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        """
        assign(FloatVector self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(FloatVector self, std::vector< float >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(FloatVector self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(FloatVector self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _ELL.FloatVector_insert(self, *args)


    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        """
        reserve(FloatVector self, std::vector< float >::size_type n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _ELL.FloatVector_reserve(self, n)


    def capacity(self) -> "std::vector< float >::size_type":
        """
        capacity(FloatVector self) -> std::vector< float >::size_type

        Parameters
        ----------
        self: std::vector< float > const *

        """
        return _ELL.FloatVector_capacity(self)

    __swig_destroy__ = _ELL.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _ELL.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVectorVector(_object):
    """Proxy of C++ std::vector<(std::vector<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(FloatVectorVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector___bool__(self)


    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        """
        __len__(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        """
        __getslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j) -> FloatVectorVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _ELL.FloatVectorVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        __setslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j, FloatVectorVector v)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        """
        return _ELL.FloatVectorVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::vector< float > >::difference_type', j: 'std::vector< std::vector< float > >::difference_type') -> "void":
        """
        __delslice__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, std::vector< std::vector< float > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        j: std::vector< std::vector< float > >::difference_type

        """
        return _ELL.FloatVectorVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        __delitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.FloatVectorVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        """
        __getitem__(FloatVectorVector self, PySliceObject * slice) -> FloatVectorVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i) -> FloatVector

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type

        """
        return _ELL.FloatVectorVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(FloatVectorVector self, PySliceObject * slice, FloatVectorVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > const &

        __setitem__(FloatVectorVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatVectorVector self, std::vector< std::vector< float > >::difference_type i, FloatVector x)

        Parameters
        ----------
        i: std::vector< std::vector< float > >::difference_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        """
        pop(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_pop(self)


    def append(self, x: 'FloatVector') -> "void":
        """
        append(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(FloatVectorVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_empty(self)


    def size(self) -> "std::vector< std::vector< float > >::size_type":
        """
        size(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_size(self)


    def swap(self, v: 'FloatVectorVector') -> "void":
        """
        swap(FloatVectorVector self, FloatVectorVector v)

        Parameters
        ----------
        v: std::vector< std::vector< float,std::allocator< float > > > &

        """
        return _ELL.FloatVectorVector_swap(self, v)


    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        """
        begin(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_begin(self)


    def end(self) -> "std::vector< std::vector< float > >::iterator":
        """
        end(FloatVectorVector self) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_end(self)


    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """
        rbegin(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_rbegin(self)


    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        """
        rend(FloatVectorVector self) -> std::vector< std::vector< float > >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_rend(self)


    def clear(self) -> "void":
        """
        clear(FloatVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_clear(self)


    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        """
        get_allocator(FloatVectorVector self) -> std::vector< std::vector< float > >::allocator_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(FloatVectorVector self)

        Parameters
        ----------
        self: std::vector< std::vector< float > > *

        """
        return _ELL.FloatVectorVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        """
        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator

        erase(FloatVectorVector self, std::vector< std::vector< float > >::iterator first, std::vector< std::vector< float > >::iterator last) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< float > >::iterator
        last: std::vector< std::vector< float > >::iterator

        """
        return _ELL.FloatVectorVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::vector<(float)>)> self) -> FloatVectorVector
        __init__(std::vector<(std::vector<(float)>)> self, FloatVectorVector arg2) -> FloatVectorVector

        Parameters
        ----------
        arg2: std::vector< std::vector< float,std::allocator< float > > > const &

        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type

        __init__(std::vector<(std::vector<(float)>)> self, std::vector< std::vector< float > >::size_type size, FloatVector value) -> FloatVectorVector

        Parameters
        ----------
        size: std::vector< std::vector< float > >::size_type
        value: std::vector< std::vector< float > >::value_type const &

        """
        this = _ELL.new_FloatVectorVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'FloatVector') -> "void":
        """
        push_back(FloatVectorVector self, FloatVector x)

        Parameters
        ----------
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector_push_back(self, x)


    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        """
        front(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_front(self)


    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        """
        back(FloatVectorVector self) -> FloatVector

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_back(self)


    def assign(self, n: 'std::vector< std::vector< float > >::size_type', x: 'FloatVector') -> "void":
        """
        assign(FloatVectorVector self, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type

        resize(FloatVectorVector self, std::vector< std::vector< float > >::size_type new_size, FloatVector x)

        Parameters
        ----------
        new_size: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, FloatVector x) -> std::vector< std::vector< float > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        x: std::vector< std::vector< float > >::value_type const &

        insert(FloatVectorVector self, std::vector< std::vector< float > >::iterator pos, std::vector< std::vector< float > >::size_type n, FloatVector x)

        Parameters
        ----------
        pos: std::vector< std::vector< float > >::iterator
        n: std::vector< std::vector< float > >::size_type
        x: std::vector< std::vector< float > >::value_type const &

        """
        return _ELL.FloatVectorVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::vector< float > >::size_type') -> "void":
        """
        reserve(FloatVectorVector self, std::vector< std::vector< float > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< float > >::size_type

        """
        return _ELL.FloatVectorVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        """
        capacity(FloatVectorVector self) -> std::vector< std::vector< float > >::size_type

        Parameters
        ----------
        self: std::vector< std::vector< float > > const *

        """
        return _ELL.FloatVectorVector_capacity(self)

    __swig_destroy__ = _ELL.delete_FloatVectorVector
    __del__ = lambda self: None
FloatVectorVector_swigregister = _ELL.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(StringVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector___bool__(self)


    def __len__(self) -> "std::vector< std::string >::size_type":
        """
        __len__(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        """
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _ELL.StringVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _ELL.StringVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        """
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _ELL.StringVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.StringVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        """
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _ELL.StringVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::string >::value_type":
        """
        pop(StringVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_pop(self)


    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(StringVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_empty(self)


    def size(self) -> "std::vector< std::string >::size_type":
        """
        size(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_size(self)


    def swap(self, v: 'StringVector') -> "void":
        """
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _ELL.StringVector_swap(self, v)


    def begin(self) -> "std::vector< std::string >::iterator":
        """
        begin(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_begin(self)


    def end(self) -> "std::vector< std::string >::iterator":
        """
        end(StringVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_end(self)


    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        """
        rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_rbegin(self)


    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        """
        rend(StringVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_rend(self)


    def clear(self) -> "void":
        """
        clear(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_clear(self)


    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        """
        get_allocator(StringVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(StringVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _ELL.StringVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::string >::iterator":
        """
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _ELL.StringVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StringVector
        __init__(std::vector<(std::string)> self, StringVector arg2) -> StringVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _ELL.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector_push_back(self, x)


    def front(self) -> "std::vector< std::string >::value_type const &":
        """
        front(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_front(self)


    def back(self) -> "std::vector< std::string >::value_type const &":
        """
        back(StringVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_back(self)


    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        """
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _ELL.StringVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        """
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _ELL.StringVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::string >::size_type":
        """
        capacity(StringVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _ELL.StringVector_capacity(self)

    __swig_destroy__ = _ELL.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _ELL.StringVector_swigregister
StringVector_swigregister(StringVector)


class FloatVector(FloatVector):
    def __init__(self, numpyArray):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
            if (len(numpyArray.shape) == 1):
                super(FloatVector, self).__init__(numpyArray)
            elif (len(numpyArray.shape) == 3):
                super(FloatVector, self).__init__(numpyArray.ravel(), numpyArray.shape[0], numpyArray.shape[1], numpyArray.shape[2])
            elif (len(numpyArray.shape) == 4):
#Create a stacked 3 dimensional tensor 
                numpyArrayStacked = numpyArray.reshape(numpyArray.shape[0] * numpyArray.shape[1], numpyArray.shape[2], numpyArray.shape[3])
                super(FloatVector, self).__init__(numpyArrayStacked.ravel(), numpyArrayStacked.shape[0], numpyArrayStacked.shape[1], numpyArrayStacked.shape[2])
            else:
                raise ValueError('Invalid number of dimensions!')
        else:
#fallback to non-numpy construction
            super(FloatVector, self).__init__(numpyArray)


class DoubleVector(DoubleVector):
    def __init__(self, numpyArray):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
            if (len(numpyArray.shape) == 1):
                super(DoubleVector, self).__init__(numpyArray)
            elif (len(numpyArray.shape) == 3):
                super(DoubleVector, self).__init__(numpyArray.ravel(), numpyArray.shape[0], numpyArray.shape[1], numpyArray.shape[2])
            elif (len(numpyArray.shape) == 4):
#Create a stacked 3 dimensional tensor 
                numpyArrayStacked = numpyArray.reshape(numpyArray.shape[0] * numpyArray.shape[1], numpyArray.shape[2], numpyArray.shape[3])
                super(DoubleVector, self).__init__(numpyArrayStacked.ravel(), numpyArrayStacked.shape[0], numpyArrayStacked.shape[1], numpyArrayStacked.shape[2])
            else:
                raise ValueError('Invalid number of dimensions!')
        else:
#fallback to non-numpy construction
            super(DoubleVector, self).__init__(numpyArray)

class ELL_LogLoss(_object):
    """Proxy of C++ ELL_API::ELL_LogLoss class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_LogLoss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_LogLoss, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_LogLoss self) -> ELL_LogLoss"""
        this = _ELL.new_ELL_LogLoss()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Evaluate(self, p: 'double', l: 'double') -> "double":
        """
        Evaluate(ELL_LogLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_LogLoss_Evaluate(self, p, l)


    def GetDerivative(self, p: 'double', l: 'double') -> "double":
        """
        GetDerivative(ELL_LogLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_LogLoss_GetDerivative(self, p, l)

    __swig_destroy__ = _ELL.delete_ELL_LogLoss
    __del__ = lambda self: None
ELL_LogLoss_swigregister = _ELL.ELL_LogLoss_swigregister
ELL_LogLoss_swigregister(ELL_LogLoss)

class ELL_HingeLoss(_object):
    """Proxy of C++ ELL_API::ELL_HingeLoss class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_HingeLoss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_HingeLoss, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_HingeLoss self) -> ELL_HingeLoss"""
        this = _ELL.new_ELL_HingeLoss()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Evaluate(self, p: 'double', l: 'double') -> "double":
        """
        Evaluate(ELL_HingeLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_HingeLoss_Evaluate(self, p, l)


    def GetDerivative(self, p: 'double', l: 'double') -> "double":
        """
        GetDerivative(ELL_HingeLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_HingeLoss_GetDerivative(self, p, l)

    __swig_destroy__ = _ELL.delete_ELL_HingeLoss
    __del__ = lambda self: None
ELL_HingeLoss_swigregister = _ELL.ELL_HingeLoss_swigregister
ELL_HingeLoss_swigregister(ELL_HingeLoss)

class ELL_SquaredLoss(_object):
    """Proxy of C++ ELL_API::ELL_SquaredLoss class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_SquaredLoss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_SquaredLoss, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_SquaredLoss self) -> ELL_SquaredLoss"""
        this = _ELL.new_ELL_SquaredLoss()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Evaluate(self, p: 'double', l: 'double') -> "double":
        """
        Evaluate(ELL_SquaredLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_SquaredLoss_Evaluate(self, p, l)


    def GetDerivative(self, p: 'double', l: 'double') -> "double":
        """
        GetDerivative(ELL_SquaredLoss self, double p, double l) -> double

        Parameters
        ----------
        p: double
        l: double

        """
        return _ELL.ELL_SquaredLoss_GetDerivative(self, p, l)


    def BregmanGenerator(self, v: 'double') -> "double":
        """
        BregmanGenerator(ELL_SquaredLoss self, double v) -> double

        Parameters
        ----------
        v: double

        """
        return _ELL.ELL_SquaredLoss_BregmanGenerator(self, v)

    __swig_destroy__ = _ELL.delete_ELL_SquaredLoss
    __del__ = lambda self: None
ELL_SquaredLoss_swigregister = _ELL.ELL_SquaredLoss_swigregister
ELL_SquaredLoss_swigregister(ELL_SquaredLoss)

class FloatTensor(_object):
    """Proxy of C++ ell::api::math::Tensor<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatTensor, name)
    __repr__ = _swig_repr

    def __init__(self, data: 'FloatVector', rows: 'size_t', columns: 'size_t', channels: 'size_t'):
        """
        __init__(ell::api::math::Tensor<(float)> self, FloatVector data, size_t rows, size_t columns, size_t channels) -> FloatTensor

        Parameters
        ----------
        data: std::vector< float,std::allocator< float > > const &
        rows: size_t
        columns: size_t
        channels: size_t

        """
        this = _ELL.new_FloatTensor(data, rows, columns, channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["rows"] = _ELL.FloatTensor_rows_get
    if _newclass:
        rows = _swig_property(_ELL.FloatTensor_rows_get)
    __swig_getmethods__["columns"] = _ELL.FloatTensor_columns_get
    if _newclass:
        columns = _swig_property(_ELL.FloatTensor_columns_get)
    __swig_getmethods__["channels"] = _ELL.FloatTensor_channels_get
    if _newclass:
        channels = _swig_property(_ELL.FloatTensor_channels_get)
    __swig_setmethods__["data"] = _ELL.FloatTensor_data_set
    __swig_getmethods__["data"] = _ELL.FloatTensor_data_get
    if _newclass:
        data = _swig_property(_ELL.FloatTensor_data_get, _ELL.FloatTensor_data_set)
    __swig_destroy__ = _ELL.delete_FloatTensor
    __del__ = lambda self: None
FloatTensor_swigregister = _ELL.FloatTensor_swigregister
FloatTensor_swigregister(FloatTensor)

class DoubleTensor(_object):
    """Proxy of C++ ell::api::math::Tensor<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleTensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleTensor, name)
    __repr__ = _swig_repr

    def __init__(self, data: 'DoubleVector', rows: 'size_t', columns: 'size_t', channels: 'size_t'):
        """
        __init__(ell::api::math::Tensor<(double)> self, DoubleVector data, size_t rows, size_t columns, size_t channels) -> DoubleTensor

        Parameters
        ----------
        data: std::vector< double,std::allocator< double > > const &
        rows: size_t
        columns: size_t
        channels: size_t

        """
        this = _ELL.new_DoubleTensor(data, rows, columns, channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_getmethods__["rows"] = _ELL.DoubleTensor_rows_get
    if _newclass:
        rows = _swig_property(_ELL.DoubleTensor_rows_get)
    __swig_getmethods__["columns"] = _ELL.DoubleTensor_columns_get
    if _newclass:
        columns = _swig_property(_ELL.DoubleTensor_columns_get)
    __swig_getmethods__["channels"] = _ELL.DoubleTensor_channels_get
    if _newclass:
        channels = _swig_property(_ELL.DoubleTensor_channels_get)
    __swig_setmethods__["data"] = _ELL.DoubleTensor_data_set
    __swig_getmethods__["data"] = _ELL.DoubleTensor_data_get
    if _newclass:
        data = _swig_property(_ELL.DoubleTensor_data_get, _ELL.DoubleTensor_data_set)
    __swig_destroy__ = _ELL.delete_DoubleTensor
    __del__ = lambda self: None
DoubleTensor_swigregister = _ELL.DoubleTensor_swigregister
DoubleTensor_swigregister(DoubleTensor)


class FloatTensor(FloatTensor):
    def __init__(self, numpyArray):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
            if (len(numpyArray.shape) == 1):
                super(FloatTensor, self).__init__(numpyArray)
            elif (len(numpyArray.shape) == 3):
                super(FloatTensor, self).__init__(numpyArray.ravel(), numpyArray.shape[0], numpyArray.shape[1], numpyArray.shape[2])
            elif (len(numpyArray.shape) == 4):
#Create a stacked 3 dimensional tensor 
                numpyArrayStacked = numpyArray.reshape(numpyArray.shape[0] * numpyArray.shape[1], numpyArray.shape[2], numpyArray.shape[3])
                super(FloatTensor, self).__init__(numpyArrayStacked.ravel(), numpyArrayStacked.shape[0], numpyArrayStacked.shape[1], numpyArrayStacked.shape[2])
            else:
                raise ValueError('Invalid number of dimensions!')
        else:
#fallback to non-numpy construction
            super(FloatTensor, self).__init__(numpyArray)


class DoubleTensor(DoubleTensor):
    def __init__(self, numpyArray):
#str(type) avoids requiring import numpy (more robust check?)
        if ('numpy.ndarray' in str(type(numpyArray))):
            if (len(numpyArray.shape) == 1):
                super(DoubleTensor, self).__init__(numpyArray)
            elif (len(numpyArray.shape) == 3):
                super(DoubleTensor, self).__init__(numpyArray.ravel(), numpyArray.shape[0], numpyArray.shape[1], numpyArray.shape[2])
            elif (len(numpyArray.shape) == 4):
#Create a stacked 3 dimensional tensor 
                numpyArrayStacked = numpyArray.reshape(numpyArray.shape[0] * numpyArray.shape[1], numpyArray.shape[2], numpyArray.shape[3])
                super(DoubleTensor, self).__init__(numpyArrayStacked.ravel(), numpyArrayStacked.shape[0], numpyArrayStacked.shape[1], numpyArrayStacked.shape[2])
            else:
                raise ValueError('Invalid number of dimensions!')
        else:
#fallback to non-numpy construction
            super(DoubleTensor, self).__init__(numpyArray)

class LayerShape(_object):
    """Proxy of C++ ell::api::predictors::neural::LayerShape class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _ELL.LayerShape_rows_set
    __swig_getmethods__["rows"] = _ELL.LayerShape_rows_get
    if _newclass:
        rows = _swig_property(_ELL.LayerShape_rows_get, _ELL.LayerShape_rows_set)
    __swig_setmethods__["columns"] = _ELL.LayerShape_columns_set
    __swig_getmethods__["columns"] = _ELL.LayerShape_columns_get
    if _newclass:
        columns = _swig_property(_ELL.LayerShape_columns_get, _ELL.LayerShape_columns_set)
    __swig_setmethods__["channels"] = _ELL.LayerShape_channels_set
    __swig_getmethods__["channels"] = _ELL.LayerShape_channels_get
    if _newclass:
        channels = _swig_property(_ELL.LayerShape_channels_get, _ELL.LayerShape_channels_set)

    def __init__(self, rows: 'size_t', columns: 'size_t', channels: 'size_t'):
        """
        __init__(ell::api::predictors::neural::LayerShape self, size_t rows, size_t columns, size_t channels) -> LayerShape

        Parameters
        ----------
        rows: size_t
        columns: size_t
        channels: size_t

        """
        this = _ELL.new_LayerShape(rows, columns, channels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_LayerShape
    __del__ = lambda self: None
LayerShape_swigregister = _ELL.LayerShape_swigregister
LayerShape_swigregister(LayerShape)

class LayerParameters(_object):
    """Proxy of C++ ell::api::predictors::neural::LayerParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inputShape"] = _ELL.LayerParameters_inputShape_set
    __swig_getmethods__["inputShape"] = _ELL.LayerParameters_inputShape_get
    if _newclass:
        inputShape = _swig_property(_ELL.LayerParameters_inputShape_get, _ELL.LayerParameters_inputShape_set)
    __swig_setmethods__["inputPaddingParameters"] = _ELL.LayerParameters_inputPaddingParameters_set
    __swig_getmethods__["inputPaddingParameters"] = _ELL.LayerParameters_inputPaddingParameters_get
    if _newclass:
        inputPaddingParameters = _swig_property(_ELL.LayerParameters_inputPaddingParameters_get, _ELL.LayerParameters_inputPaddingParameters_set)
    __swig_setmethods__["outputShape"] = _ELL.LayerParameters_outputShape_set
    __swig_getmethods__["outputShape"] = _ELL.LayerParameters_outputShape_get
    if _newclass:
        outputShape = _swig_property(_ELL.LayerParameters_outputShape_get, _ELL.LayerParameters_outputShape_set)
    __swig_setmethods__["outputPaddingParameters"] = _ELL.LayerParameters_outputPaddingParameters_set
    __swig_getmethods__["outputPaddingParameters"] = _ELL.LayerParameters_outputPaddingParameters_get
    if _newclass:
        outputPaddingParameters = _swig_property(_ELL.LayerParameters_outputPaddingParameters_get, _ELL.LayerParameters_outputPaddingParameters_set)

    def __init__(self, inputShape: 'LayerShape', inputPaddingParameters: 'PaddingParameters', outputShape: 'LayerShape', outputPaddingParameters: 'PaddingParameters'):
        """
        __init__(ell::api::predictors::neural::LayerParameters self, LayerShape inputShape, PaddingParameters inputPaddingParameters, LayerShape outputShape, PaddingParameters outputPaddingParameters) -> LayerParameters

        Parameters
        ----------
        inputShape: ell::api::predictors::neural::LayerShape const &
        inputPaddingParameters: ell::api::predictors::neural::PaddingParameters const &
        outputShape: ell::api::predictors::neural::LayerShape const &
        outputPaddingParameters: ell::api::predictors::neural::PaddingParameters const &

        """
        this = _ELL.new_LayerParameters(inputShape, inputPaddingParameters, outputShape, outputPaddingParameters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_LayerParameters
    __del__ = lambda self: None
LayerParameters_swigregister = _ELL.LayerParameters_swigregister
LayerParameters_swigregister(LayerParameters)

ActivationType_relu = _ELL.ActivationType_relu
ActivationType_leaky = _ELL.ActivationType_leaky
ActivationType_sigmoid = _ELL.ActivationType_sigmoid
EpsilonSummand_variance = _ELL.EpsilonSummand_variance
EpsilonSummand_sqrtVariance = _ELL.EpsilonSummand_sqrtVariance
PoolingType_max = _ELL.PoolingType_max
PoolingType_mean = _ELL.PoolingType_mean
LayerType_base = _ELL.LayerType_base
LayerType_activation = _ELL.LayerType_activation
LayerType_batchNormalization = _ELL.LayerType_batchNormalization
LayerType_bias = _ELL.LayerType_bias
LayerType_binaryConvolution = _ELL.LayerType_binaryConvolution
LayerType_convolution = _ELL.LayerType_convolution
LayerType_fullyConnected = _ELL.LayerType_fullyConnected
LayerType_input = _ELL.LayerType_input
LayerType_pooling = _ELL.LayerType_pooling
LayerType_scaling = _ELL.LayerType_scaling
LayerType_softmax = _ELL.LayerType_softmax
PaddingScheme_zeros = _ELL.PaddingScheme_zeros
PaddingScheme_minusOnes = _ELL.PaddingScheme_minusOnes
PaddingScheme_alternatingZeroAndOnes = _ELL.PaddingScheme_alternatingZeroAndOnes
PaddingScheme_randomZeroAndOnes = _ELL.PaddingScheme_randomZeroAndOnes
PaddingScheme_min = _ELL.PaddingScheme_min
PaddingScheme_max = _ELL.PaddingScheme_max
class PaddingParameters(_object):
    """Proxy of C++ ell::predictors::neural::PaddingParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaddingParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PaddingParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["paddingScheme"] = _ELL.PaddingParameters_paddingScheme_set
    __swig_getmethods__["paddingScheme"] = _ELL.PaddingParameters_paddingScheme_get
    if _newclass:
        paddingScheme = _swig_property(_ELL.PaddingParameters_paddingScheme_get, _ELL.PaddingParameters_paddingScheme_set)
    __swig_setmethods__["paddingSize"] = _ELL.PaddingParameters_paddingSize_set
    __swig_getmethods__["paddingSize"] = _ELL.PaddingParameters_paddingSize_get
    if _newclass:
        paddingSize = _swig_property(_ELL.PaddingParameters_paddingSize_get, _ELL.PaddingParameters_paddingSize_set)

    def __init__(self, paddingScheme: 'ell::predictors::neural::PaddingScheme', paddingSize: 'size_t'):
        """
        __init__(ell::predictors::neural::PaddingParameters self, ell::predictors::neural::PaddingScheme paddingScheme, size_t paddingSize) -> PaddingParameters

        Parameters
        ----------
        paddingScheme: enum ell::predictors::neural::PaddingScheme
        paddingSize: size_t

        """
        this = _ELL.new_PaddingParameters(paddingScheme, paddingSize)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_PaddingParameters
    __del__ = lambda self: None
PaddingParameters_swigregister = _ELL.PaddingParameters_swigregister
PaddingParameters_swigregister(PaddingParameters)
cvar = _ELL.cvar
LayerNames = cvar.LayerNames


def NoPadding() -> "ell::predictors::neural::PaddingParameters":
    """NoPadding() -> PaddingParameters"""
    return _ELL.NoPadding()

def ZeroPadding(width: 'size_t') -> "ell::predictors::neural::PaddingParameters":
    """
    ZeroPadding(size_t width) -> PaddingParameters

    Parameters
    ----------
    width: size_t

    """
    return _ELL.ZeroPadding(width)

def MinPadding(width: 'size_t') -> "ell::predictors::neural::PaddingParameters const":
    """
    MinPadding(size_t width) -> PaddingParameters

    Parameters
    ----------
    width: size_t

    """
    return _ELL.MinPadding(width)

def MinusOnePadding(width: 'size_t') -> "ell::predictors::neural::PaddingParameters const":
    """
    MinusOnePadding(size_t width) -> PaddingParameters

    Parameters
    ----------
    width: size_t

    """
    return _ELL.MinusOnePadding(width)

def HasPadding(padding: 'PaddingParameters') -> "bool":
    """
    HasPadding(PaddingParameters padding) -> bool

    Parameters
    ----------
    padding: ell::predictors::neural::PaddingParameters const &

    """
    return _ELL.HasPadding(padding)
BinaryConvolutionMethod_gemm = _ELL.BinaryConvolutionMethod_gemm
BinaryConvolutionMethod_bitwise = _ELL.BinaryConvolutionMethod_bitwise
class BinaryConvolutionalParameters(_object):
    """Proxy of C++ ell::predictors::neural::BinaryConvolutionalParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryConvolutionalParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryConvolutionalParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["receptiveField"] = _ELL.BinaryConvolutionalParameters_receptiveField_set
    __swig_getmethods__["receptiveField"] = _ELL.BinaryConvolutionalParameters_receptiveField_get
    if _newclass:
        receptiveField = _swig_property(_ELL.BinaryConvolutionalParameters_receptiveField_get, _ELL.BinaryConvolutionalParameters_receptiveField_set)
    __swig_setmethods__["stride"] = _ELL.BinaryConvolutionalParameters_stride_set
    __swig_getmethods__["stride"] = _ELL.BinaryConvolutionalParameters_stride_get
    if _newclass:
        stride = _swig_property(_ELL.BinaryConvolutionalParameters_stride_get, _ELL.BinaryConvolutionalParameters_stride_set)
    __swig_setmethods__["method"] = _ELL.BinaryConvolutionalParameters_method_set
    __swig_getmethods__["method"] = _ELL.BinaryConvolutionalParameters_method_get
    if _newclass:
        method = _swig_property(_ELL.BinaryConvolutionalParameters_method_get, _ELL.BinaryConvolutionalParameters_method_set)

    def __init__(self, receptiveField: 'size_t', stride: 'size_t', binaryConvolutionMethod: 'ell::predictors::neural::BinaryConvolutionMethod'):
        """
        __init__(ell::predictors::neural::BinaryConvolutionalParameters self, size_t receptiveField, size_t stride, ell::predictors::neural::BinaryConvolutionMethod binaryConvolutionMethod) -> BinaryConvolutionalParameters

        Parameters
        ----------
        receptiveField: size_t
        stride: size_t
        binaryConvolutionMethod: enum ell::predictors::neural::BinaryConvolutionMethod

        """
        this = _ELL.new_BinaryConvolutionalParameters(receptiveField, stride, binaryConvolutionMethod)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_BinaryConvolutionalParameters
    __del__ = lambda self: None
BinaryConvolutionalParameters_swigregister = _ELL.BinaryConvolutionalParameters_swigregister
BinaryConvolutionalParameters_swigregister(BinaryConvolutionalParameters)

ConvolutionMethod_columnwise = _ELL.ConvolutionMethod_columnwise
ConvolutionMethod_diagonal = _ELL.ConvolutionMethod_diagonal
class ConvolutionalParameters(_object):
    """Proxy of C++ ell::predictors::neural::ConvolutionalParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvolutionalParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvolutionalParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["receptiveField"] = _ELL.ConvolutionalParameters_receptiveField_set
    __swig_getmethods__["receptiveField"] = _ELL.ConvolutionalParameters_receptiveField_get
    if _newclass:
        receptiveField = _swig_property(_ELL.ConvolutionalParameters_receptiveField_get, _ELL.ConvolutionalParameters_receptiveField_set)
    __swig_setmethods__["stride"] = _ELL.ConvolutionalParameters_stride_set
    __swig_getmethods__["stride"] = _ELL.ConvolutionalParameters_stride_get
    if _newclass:
        stride = _swig_property(_ELL.ConvolutionalParameters_stride_get, _ELL.ConvolutionalParameters_stride_set)
    __swig_setmethods__["method"] = _ELL.ConvolutionalParameters_method_set
    __swig_getmethods__["method"] = _ELL.ConvolutionalParameters_method_get
    if _newclass:
        method = _swig_property(_ELL.ConvolutionalParameters_method_get, _ELL.ConvolutionalParameters_method_set)
    __swig_setmethods__["numFiltersAtATime"] = _ELL.ConvolutionalParameters_numFiltersAtATime_set
    __swig_getmethods__["numFiltersAtATime"] = _ELL.ConvolutionalParameters_numFiltersAtATime_get
    if _newclass:
        numFiltersAtATime = _swig_property(_ELL.ConvolutionalParameters_numFiltersAtATime_get, _ELL.ConvolutionalParameters_numFiltersAtATime_set)

    def __init__(self, receptiveField: 'size_t', stride: 'size_t', convolutionMethod: 'ell::predictors::neural::ConvolutionMethod', numFiltersAtATime: 'size_t'):
        """
        __init__(ell::predictors::neural::ConvolutionalParameters self, size_t receptiveField, size_t stride, ell::predictors::neural::ConvolutionMethod convolutionMethod, size_t numFiltersAtATime) -> ConvolutionalParameters

        Parameters
        ----------
        receptiveField: size_t
        stride: size_t
        convolutionMethod: enum ell::predictors::neural::ConvolutionMethod
        numFiltersAtATime: size_t

        """
        this = _ELL.new_ConvolutionalParameters(receptiveField, stride, convolutionMethod, numFiltersAtATime)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_ConvolutionalParameters
    __del__ = lambda self: None
ConvolutionalParameters_swigregister = _ELL.ConvolutionalParameters_swigregister
ConvolutionalParameters_swigregister(ConvolutionalParameters)

class PoolingParameters(_object):
    """Proxy of C++ ell::predictors::neural::PoolingParameters class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoolingParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoolingParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["poolingSize"] = _ELL.PoolingParameters_poolingSize_set
    __swig_getmethods__["poolingSize"] = _ELL.PoolingParameters_poolingSize_get
    if _newclass:
        poolingSize = _swig_property(_ELL.PoolingParameters_poolingSize_get, _ELL.PoolingParameters_poolingSize_set)
    __swig_setmethods__["stride"] = _ELL.PoolingParameters_stride_set
    __swig_getmethods__["stride"] = _ELL.PoolingParameters_stride_get
    if _newclass:
        stride = _swig_property(_ELL.PoolingParameters_stride_get, _ELL.PoolingParameters_stride_set)

    def __init__(self, poolingSize: 'size_t', stride: 'size_t'):
        """
        __init__(ell::predictors::neural::PoolingParameters self, size_t poolingSize, size_t stride) -> PoolingParameters

        Parameters
        ----------
        poolingSize: size_t
        stride: size_t

        """
        this = _ELL.new_PoolingParameters(poolingSize, stride)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_PoolingParameters
    __del__ = lambda self: None
PoolingParameters_swigregister = _ELL.PoolingParameters_swigregister
PoolingParameters_swigregister(PoolingParameters)

class FloatLayer(_object):
    """Proxy of C++ ell::api::predictors::neural::Layer<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatLayer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ELL.delete_FloatLayer
    __del__ = lambda self: None

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::Layer< float > const *

        """
        return _ELL.FloatLayer_GetLayerType(self)

    __swig_getmethods__["parameters"] = _ELL.FloatLayer_parameters_get
    if _newclass:
        parameters = _swig_property(_ELL.FloatLayer_parameters_get)
FloatLayer_swigregister = _ELL.FloatLayer_swigregister
FloatLayer_swigregister(FloatLayer)

class FloatActivationLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::ActivationLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatActivationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatActivationLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', activation: 'ell::api::predictors::neural::ActivationType'):
        """
        __init__(ell::api::predictors::neural::ActivationLayer<(float)> self, LayerParameters layerParameters, ell::api::predictors::neural::ActivationType activation) -> FloatActivationLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        activation: enum ell::api::predictors::neural::ActivationType

        """
        this = _ELL.new_FloatActivationLayer(layerParameters, activation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatActivationLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ActivationLayer< float > const *

        """
        return _ELL.FloatActivationLayer_GetLayerType(self)

    __swig_getmethods__["activation"] = _ELL.FloatActivationLayer_activation_get
    if _newclass:
        activation = _swig_property(_ELL.FloatActivationLayer_activation_get)
    __swig_destroy__ = _ELL.delete_FloatActivationLayer
    __del__ = lambda self: None
FloatActivationLayer_swigregister = _ELL.FloatActivationLayer_swigregister
FloatActivationLayer_swigregister(FloatActivationLayer)

class FloatBatchNormalizationLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::BatchNormalizationLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatBatchNormalizationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatBatchNormalizationLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', mean: 'FloatVector', variance: 'FloatVector', epsilon: 'float', epsilonSummand: 'ell::api::predictors::neural::EpsilonSummand'):
        """
        __init__(ell::api::predictors::neural::BatchNormalizationLayer<(float)> self, LayerParameters layerParameters, FloatVector mean, FloatVector variance, float epsilon, ell::api::predictors::neural::EpsilonSummand epsilonSummand) -> FloatBatchNormalizationLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        mean: std::vector< float,std::allocator< float > > const &
        variance: std::vector< float,std::allocator< float > > const &
        epsilon: float
        epsilonSummand: enum ell::api::predictors::neural::EpsilonSummand

        """
        this = _ELL.new_FloatBatchNormalizationLayer(layerParameters, mean, variance, epsilon, epsilonSummand)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatBatchNormalizationLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BatchNormalizationLayer< float > const *

        """
        return _ELL.FloatBatchNormalizationLayer_GetLayerType(self)

    __swig_getmethods__["mean"] = _ELL.FloatBatchNormalizationLayer_mean_get
    if _newclass:
        mean = _swig_property(_ELL.FloatBatchNormalizationLayer_mean_get)
    __swig_getmethods__["variance"] = _ELL.FloatBatchNormalizationLayer_variance_get
    if _newclass:
        variance = _swig_property(_ELL.FloatBatchNormalizationLayer_variance_get)
    __swig_getmethods__["epsilon"] = _ELL.FloatBatchNormalizationLayer_epsilon_get
    if _newclass:
        epsilon = _swig_property(_ELL.FloatBatchNormalizationLayer_epsilon_get)
    __swig_getmethods__["epsilonSummand"] = _ELL.FloatBatchNormalizationLayer_epsilonSummand_get
    if _newclass:
        epsilonSummand = _swig_property(_ELL.FloatBatchNormalizationLayer_epsilonSummand_get)
    __swig_destroy__ = _ELL.delete_FloatBatchNormalizationLayer
    __del__ = lambda self: None
FloatBatchNormalizationLayer_swigregister = _ELL.FloatBatchNormalizationLayer_swigregister
FloatBatchNormalizationLayer_swigregister(FloatBatchNormalizationLayer)

class FloatBiasLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::BiasLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatBiasLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatBiasLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', bias: 'FloatVector'):
        """
        __init__(ell::api::predictors::neural::BiasLayer<(float)> self, LayerParameters layerParameters, FloatVector bias) -> FloatBiasLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        bias: std::vector< float,std::allocator< float > > const &

        """
        this = _ELL.new_FloatBiasLayer(layerParameters, bias)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatBiasLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BiasLayer< float > const *

        """
        return _ELL.FloatBiasLayer_GetLayerType(self)

    __swig_getmethods__["bias"] = _ELL.FloatBiasLayer_bias_get
    if _newclass:
        bias = _swig_property(_ELL.FloatBiasLayer_bias_get)
    __swig_destroy__ = _ELL.delete_FloatBiasLayer
    __del__ = lambda self: None
FloatBiasLayer_swigregister = _ELL.FloatBiasLayer_swigregister
FloatBiasLayer_swigregister(FloatBiasLayer)

class FloatBinaryConvolutionalLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::BinaryConvolutionalLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatBinaryConvolutionalLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatBinaryConvolutionalLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', convolutionalParameters: 'BinaryConvolutionalParameters', weightsTensor: 'FloatTensor'):
        """
        __init__(ell::api::predictors::neural::BinaryConvolutionalLayer<(float)> self, LayerParameters layerParameters, BinaryConvolutionalParameters convolutionalParameters, FloatTensor weightsTensor) -> FloatBinaryConvolutionalLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        convolutionalParameters: ell::api::predictors::neural::BinaryConvolutionalParameters const &
        weightsTensor: ell::api::math::Tensor< float > const &

        """
        this = _ELL.new_FloatBinaryConvolutionalLayer(layerParameters, convolutionalParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatBinaryConvolutionalLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BinaryConvolutionalLayer< float > const *

        """
        return _ELL.FloatBinaryConvolutionalLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.FloatBinaryConvolutionalLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.FloatBinaryConvolutionalLayer_weights_get)
    __swig_getmethods__["convolutionalParameters"] = _ELL.FloatBinaryConvolutionalLayer_convolutionalParameters_get
    if _newclass:
        convolutionalParameters = _swig_property(_ELL.FloatBinaryConvolutionalLayer_convolutionalParameters_get)
    __swig_destroy__ = _ELL.delete_FloatBinaryConvolutionalLayer
    __del__ = lambda self: None
FloatBinaryConvolutionalLayer_swigregister = _ELL.FloatBinaryConvolutionalLayer_swigregister
FloatBinaryConvolutionalLayer_swigregister(FloatBinaryConvolutionalLayer)

class FloatConvolutionalLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::ConvolutionalLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatConvolutionalLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatConvolutionalLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', convolutionalParameters: 'ConvolutionalParameters', weightsTensor: 'FloatTensor'):
        """
        __init__(ell::api::predictors::neural::ConvolutionalLayer<(float)> self, LayerParameters layerParameters, ConvolutionalParameters convolutionalParameters, FloatTensor weightsTensor) -> FloatConvolutionalLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        convolutionalParameters: ell::api::predictors::neural::ConvolutionalParameters const &
        weightsTensor: ell::api::math::Tensor< float > const &

        """
        this = _ELL.new_FloatConvolutionalLayer(layerParameters, convolutionalParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatConvolutionalLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ConvolutionalLayer< float > const *

        """
        return _ELL.FloatConvolutionalLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.FloatConvolutionalLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.FloatConvolutionalLayer_weights_get)
    __swig_getmethods__["convolutionalParameters"] = _ELL.FloatConvolutionalLayer_convolutionalParameters_get
    if _newclass:
        convolutionalParameters = _swig_property(_ELL.FloatConvolutionalLayer_convolutionalParameters_get)
    __swig_destroy__ = _ELL.delete_FloatConvolutionalLayer
    __del__ = lambda self: None
FloatConvolutionalLayer_swigregister = _ELL.FloatConvolutionalLayer_swigregister
FloatConvolutionalLayer_swigregister(FloatConvolutionalLayer)

class FloatFullyConnectedLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::FullyConnectedLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFullyConnectedLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFullyConnectedLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', weightsTensor: 'FloatTensor'):
        """
        __init__(ell::api::predictors::neural::FullyConnectedLayer<(float)> self, LayerParameters layerParameters, FloatTensor weightsTensor) -> FloatFullyConnectedLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        weightsTensor: ell::api::math::Tensor< float > const &

        """
        this = _ELL.new_FloatFullyConnectedLayer(layerParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatFullyConnectedLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::FullyConnectedLayer< float > const *

        """
        return _ELL.FloatFullyConnectedLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.FloatFullyConnectedLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.FloatFullyConnectedLayer_weights_get)
    __swig_destroy__ = _ELL.delete_FloatFullyConnectedLayer
    __del__ = lambda self: None
FloatFullyConnectedLayer_swigregister = _ELL.FloatFullyConnectedLayer_swigregister
FloatFullyConnectedLayer_swigregister(FloatFullyConnectedLayer)

class FloatPoolingLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::PoolingLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatPoolingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatPoolingLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', poolingParameters: 'PoolingParameters', poolingType: 'ell::api::predictors::neural::PoolingType'):
        """
        __init__(ell::api::predictors::neural::PoolingLayer<(float)> self, LayerParameters layerParameters, PoolingParameters poolingParameters, ell::api::predictors::neural::PoolingType poolingType) -> FloatPoolingLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        poolingParameters: ell::api::predictors::neural::PoolingParameters const &
        poolingType: enum ell::api::predictors::neural::PoolingType

        """
        this = _ELL.new_FloatPoolingLayer(layerParameters, poolingParameters, poolingType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatPoolingLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::PoolingLayer< float > const *

        """
        return _ELL.FloatPoolingLayer_GetLayerType(self)

    __swig_getmethods__["poolingType"] = _ELL.FloatPoolingLayer_poolingType_get
    if _newclass:
        poolingType = _swig_property(_ELL.FloatPoolingLayer_poolingType_get)
    __swig_getmethods__["poolingParameters"] = _ELL.FloatPoolingLayer_poolingParameters_get
    if _newclass:
        poolingParameters = _swig_property(_ELL.FloatPoolingLayer_poolingParameters_get)
    __swig_destroy__ = _ELL.delete_FloatPoolingLayer
    __del__ = lambda self: None
FloatPoolingLayer_swigregister = _ELL.FloatPoolingLayer_swigregister
FloatPoolingLayer_swigregister(FloatPoolingLayer)

class FloatScalingLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::ScalingLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatScalingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatScalingLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', scales: 'FloatVector'):
        """
        __init__(ell::api::predictors::neural::ScalingLayer<(float)> self, LayerParameters layerParameters, FloatVector scales) -> FloatScalingLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        scales: std::vector< float,std::allocator< float > > const &

        """
        this = _ELL.new_FloatScalingLayer(layerParameters, scales)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatScalingLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ScalingLayer< float > const *

        """
        return _ELL.FloatScalingLayer_GetLayerType(self)

    __swig_getmethods__["scales"] = _ELL.FloatScalingLayer_scales_get
    if _newclass:
        scales = _swig_property(_ELL.FloatScalingLayer_scales_get)
    __swig_destroy__ = _ELL.delete_FloatScalingLayer
    __del__ = lambda self: None
FloatScalingLayer_swigregister = _ELL.FloatScalingLayer_swigregister
FloatScalingLayer_swigregister(FloatScalingLayer)

class FloatSoftmaxLayer(FloatLayer):
    """Proxy of C++ ell::api::predictors::neural::SoftmaxLayer<(float)> class."""

    __swig_setmethods__ = {}
    for _s in [FloatLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatSoftmaxLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [FloatLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatSoftmaxLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters'):
        """
        __init__(ell::api::predictors::neural::SoftmaxLayer<(float)> self, LayerParameters layerParameters) -> FloatSoftmaxLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &

        """
        this = _ELL.new_FloatSoftmaxLayer(layerParameters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(FloatSoftmaxLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::SoftmaxLayer< float > const *

        """
        return _ELL.FloatSoftmaxLayer_GetLayerType(self)

    __swig_destroy__ = _ELL.delete_FloatSoftmaxLayer
    __del__ = lambda self: None
FloatSoftmaxLayer_swigregister = _ELL.FloatSoftmaxLayer_swigregister
FloatSoftmaxLayer_swigregister(FloatSoftmaxLayer)

class FloatLayerVector(_object):
    """Proxy of C++ std::vector<(p.ell::api::predictors::neural::Layer<(float)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatLayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatLayerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(FloatLayerVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(FloatLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(FloatLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector___bool__(self)


    def __len__(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::size_type":
        """
        __len__(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector___len__(self)


    def __getslice__(self, i: 'std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type', j: 'std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type') -> "std::vector< ell::api::predictors::neural::Layer< float > *,std::allocator< ell::api::predictors::neural::Layer< float > * > > *":
        """
        __getslice__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type j) -> FloatLayerVector

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type

        """
        return _ELL.FloatLayerVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type j)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type

        __setslice__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type j, FloatLayerVector v)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        v: std::vector< ell::api::predictors::neural::Layer< float > *,std::allocator< ell::api::predictors::neural::Layer< float > * > > const &

        """
        return _ELL.FloatLayerVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type', j: 'std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type') -> "void":
        """
        __delslice__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type j)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type

        """
        return _ELL.FloatLayerVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type

        __delitem__(FloatLayerVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.FloatLayerVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::value_type":
        """
        __getitem__(FloatLayerVector self, PySliceObject * slice) -> FloatLayerVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i) -> FloatLayer

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type

        """
        return _ELL.FloatLayerVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(FloatLayerVector self, PySliceObject * slice, FloatLayerVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ell::api::predictors::neural::Layer< float > *,std::allocator< ell::api::predictors::neural::Layer< float > * > > const &

        __setitem__(FloatLayerVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type i, FloatLayer x)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< float > * >::difference_type
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector___setitem__(self, *args)


    def pop(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::value_type":
        """
        pop(FloatLayerVector self) -> FloatLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_pop(self)


    def append(self, x: 'FloatLayer') -> "void":
        """
        append(FloatLayerVector self, FloatLayer x)

        Parameters
        ----------
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(FloatLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_empty(self)


    def size(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::size_type":
        """
        size(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_size(self)


    def swap(self, v: 'FloatLayerVector') -> "void":
        """
        swap(FloatLayerVector self, FloatLayerVector v)

        Parameters
        ----------
        v: std::vector< ell::api::predictors::neural::Layer< float > * > &

        """
        return _ELL.FloatLayerVector_swap(self, v)


    def begin(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::iterator":
        """
        begin(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_begin(self)


    def end(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::iterator":
        """
        end(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_end(self)


    def rbegin(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::reverse_iterator":
        """
        rbegin(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_rbegin(self)


    def rend(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::reverse_iterator":
        """
        rend(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_rend(self)


    def clear(self) -> "void":
        """
        clear(FloatLayerVector self)

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_clear(self)


    def get_allocator(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::allocator_type":
        """
        get_allocator(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::allocator_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(FloatLayerVector self)

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > *

        """
        return _ELL.FloatLayerVector_pop_back(self)


    def erase(self, *args) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::iterator":
        """
        erase(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::iterator pos) -> std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        erase(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::iterator first, std::vector< ell::api::predictors::neural::Layer< float > * >::iterator last) -> std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        Parameters
        ----------
        first: std::vector< ell::api::predictors::neural::Layer< float > * >::iterator
        last: std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        """
        return _ELL.FloatLayerVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(float)>)> self) -> FloatLayerVector
        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(float)>)> self, FloatLayerVector arg2) -> FloatLayerVector

        Parameters
        ----------
        arg2: std::vector< ell::api::predictors::neural::Layer< float > * > const &

        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(float)>)> self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type size) -> FloatLayerVector

        Parameters
        ----------
        size: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(float)>)> self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type size, FloatLayer value) -> FloatLayerVector

        Parameters
        ----------
        size: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type
        value: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        this = _ELL.new_FloatLayerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'FloatLayer') -> "void":
        """
        push_back(FloatLayerVector self, FloatLayer x)

        Parameters
        ----------
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector_push_back(self, x)


    def front(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::value_type":
        """
        front(FloatLayerVector self) -> FloatLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_front(self)


    def back(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::value_type":
        """
        back(FloatLayerVector self) -> FloatLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_back(self)


    def assign(self, n: 'std::vector< ell::api::predictors::neural::Layer< float > * >::size_type', x: 'FloatLayer') -> "void":
        """
        assign(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type n, FloatLayer x)

        Parameters
        ----------
        n: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        resize(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type new_size, FloatLayer x)

        Parameters
        ----------
        new_size: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::iterator pos, FloatLayer x) -> std::vector< ell::api::predictors::neural::Layer< float > * >::iterator

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< float > * >::iterator
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        insert(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::iterator pos, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type n, FloatLayer x)

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< float > * >::iterator
        n: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< float > * >::value_type

        """
        return _ELL.FloatLayerVector_insert(self, *args)


    def reserve(self, n: 'std::vector< ell::api::predictors::neural::Layer< float > * >::size_type') -> "void":
        """
        reserve(FloatLayerVector self, std::vector< ell::api::predictors::neural::Layer< float > * >::size_type n)

        Parameters
        ----------
        n: std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        """
        return _ELL.FloatLayerVector_reserve(self, n)


    def capacity(self) -> "std::vector< ell::api::predictors::neural::Layer< float > * >::size_type":
        """
        capacity(FloatLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< float > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< float > * > const *

        """
        return _ELL.FloatLayerVector_capacity(self)

    __swig_destroy__ = _ELL.delete_FloatLayerVector
    __del__ = lambda self: None
FloatLayerVector_swigregister = _ELL.FloatLayerVector_swigregister
FloatLayerVector_swigregister(FloatLayerVector)

class FloatNeuralNetworkPredictor(_object):
    """Proxy of C++ ell::api::predictors::NeuralNetworkPredictor<(float)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatNeuralNetworkPredictor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatNeuralNetworkPredictor, name)
    __repr__ = _swig_repr

    def __init__(self, layers: 'FloatLayerVector'):
        """
        __init__(ell::api::predictors::NeuralNetworkPredictor<(float)> self, FloatLayerVector layers) -> FloatNeuralNetworkPredictor

        Parameters
        ----------
        layers: std::vector< ell::api::predictors::NeuralNetworkPredictor< float >::Layer *,std::allocator< ell::api::predictors::NeuralNetworkPredictor< float >::Layer * > > const &

        """
        this = _ELL.new_FloatNeuralNetworkPredictor(layers)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Predict(self, input: 'DoubleVector') -> "std::vector< float,std::allocator< float > >":
        """
        Predict(FloatNeuralNetworkPredictor self, DoubleVector input) -> FloatVector

        Parameters
        ----------
        input: std::vector< double,std::allocator< double > > const &

        """
        return _ELL.FloatNeuralNetworkPredictor_Predict(self, input)


    def GetInputShape(self) -> "ell::api::predictors::neural::LayerShape":
        """
        GetInputShape(FloatNeuralNetworkPredictor self) -> LayerShape

        Parameters
        ----------
        self: ell::api::predictors::NeuralNetworkPredictor< float > const *

        """
        return _ELL.FloatNeuralNetworkPredictor_GetInputShape(self)


    def GetOutputShape(self) -> "ell::api::predictors::neural::LayerShape":
        """
        GetOutputShape(FloatNeuralNetworkPredictor self) -> LayerShape

        Parameters
        ----------
        self: ell::api::predictors::NeuralNetworkPredictor< float > const *

        """
        return _ELL.FloatNeuralNetworkPredictor_GetOutputShape(self)

    __swig_destroy__ = _ELL.delete_FloatNeuralNetworkPredictor
    __del__ = lambda self: None
FloatNeuralNetworkPredictor_swigregister = _ELL.FloatNeuralNetworkPredictor_swigregister
FloatNeuralNetworkPredictor_swigregister(FloatNeuralNetworkPredictor)

class DoubleLayer(_object):
    """Proxy of C++ ell::api::predictors::neural::Layer<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleLayer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ELL.delete_DoubleLayer
    __del__ = lambda self: None

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::Layer< double > const *

        """
        return _ELL.DoubleLayer_GetLayerType(self)

    __swig_getmethods__["parameters"] = _ELL.DoubleLayer_parameters_get
    if _newclass:
        parameters = _swig_property(_ELL.DoubleLayer_parameters_get)
DoubleLayer_swigregister = _ELL.DoubleLayer_swigregister
DoubleLayer_swigregister(DoubleLayer)

class DoubleActivationLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::ActivationLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleActivationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleActivationLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', activation: 'ell::api::predictors::neural::ActivationType'):
        """
        __init__(ell::api::predictors::neural::ActivationLayer<(double)> self, LayerParameters layerParameters, ell::api::predictors::neural::ActivationType activation) -> DoubleActivationLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        activation: enum ell::api::predictors::neural::ActivationType

        """
        this = _ELL.new_DoubleActivationLayer(layerParameters, activation)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleActivationLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ActivationLayer< double > const *

        """
        return _ELL.DoubleActivationLayer_GetLayerType(self)

    __swig_getmethods__["activation"] = _ELL.DoubleActivationLayer_activation_get
    if _newclass:
        activation = _swig_property(_ELL.DoubleActivationLayer_activation_get)
    __swig_destroy__ = _ELL.delete_DoubleActivationLayer
    __del__ = lambda self: None
DoubleActivationLayer_swigregister = _ELL.DoubleActivationLayer_swigregister
DoubleActivationLayer_swigregister(DoubleActivationLayer)

class DoubleBatchNormalizationLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::BatchNormalizationLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleBatchNormalizationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleBatchNormalizationLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', mean: 'DoubleVector', variance: 'DoubleVector', epsilon: 'double', epsilonSummand: 'ell::api::predictors::neural::EpsilonSummand'):
        """
        __init__(ell::api::predictors::neural::BatchNormalizationLayer<(double)> self, LayerParameters layerParameters, DoubleVector mean, DoubleVector variance, double epsilon, ell::api::predictors::neural::EpsilonSummand epsilonSummand) -> DoubleBatchNormalizationLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        mean: std::vector< double,std::allocator< double > > const &
        variance: std::vector< double,std::allocator< double > > const &
        epsilon: double
        epsilonSummand: enum ell::api::predictors::neural::EpsilonSummand

        """
        this = _ELL.new_DoubleBatchNormalizationLayer(layerParameters, mean, variance, epsilon, epsilonSummand)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleBatchNormalizationLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BatchNormalizationLayer< double > const *

        """
        return _ELL.DoubleBatchNormalizationLayer_GetLayerType(self)

    __swig_getmethods__["mean"] = _ELL.DoubleBatchNormalizationLayer_mean_get
    if _newclass:
        mean = _swig_property(_ELL.DoubleBatchNormalizationLayer_mean_get)
    __swig_getmethods__["variance"] = _ELL.DoubleBatchNormalizationLayer_variance_get
    if _newclass:
        variance = _swig_property(_ELL.DoubleBatchNormalizationLayer_variance_get)
    __swig_getmethods__["epsilon"] = _ELL.DoubleBatchNormalizationLayer_epsilon_get
    if _newclass:
        epsilon = _swig_property(_ELL.DoubleBatchNormalizationLayer_epsilon_get)
    __swig_getmethods__["epsilonSummand"] = _ELL.DoubleBatchNormalizationLayer_epsilonSummand_get
    if _newclass:
        epsilonSummand = _swig_property(_ELL.DoubleBatchNormalizationLayer_epsilonSummand_get)
    __swig_destroy__ = _ELL.delete_DoubleBatchNormalizationLayer
    __del__ = lambda self: None
DoubleBatchNormalizationLayer_swigregister = _ELL.DoubleBatchNormalizationLayer_swigregister
DoubleBatchNormalizationLayer_swigregister(DoubleBatchNormalizationLayer)

class DoubleBiasLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::BiasLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleBiasLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleBiasLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', bias: 'DoubleVector'):
        """
        __init__(ell::api::predictors::neural::BiasLayer<(double)> self, LayerParameters layerParameters, DoubleVector bias) -> DoubleBiasLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        bias: std::vector< double,std::allocator< double > > const &

        """
        this = _ELL.new_DoubleBiasLayer(layerParameters, bias)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleBiasLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BiasLayer< double > const *

        """
        return _ELL.DoubleBiasLayer_GetLayerType(self)

    __swig_getmethods__["bias"] = _ELL.DoubleBiasLayer_bias_get
    if _newclass:
        bias = _swig_property(_ELL.DoubleBiasLayer_bias_get)
    __swig_destroy__ = _ELL.delete_DoubleBiasLayer
    __del__ = lambda self: None
DoubleBiasLayer_swigregister = _ELL.DoubleBiasLayer_swigregister
DoubleBiasLayer_swigregister(DoubleBiasLayer)

class DoubleBinaryConvolutionalLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::BinaryConvolutionalLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleBinaryConvolutionalLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleBinaryConvolutionalLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', convolutionalParameters: 'BinaryConvolutionalParameters', weightsTensor: 'DoubleTensor'):
        """
        __init__(ell::api::predictors::neural::BinaryConvolutionalLayer<(double)> self, LayerParameters layerParameters, BinaryConvolutionalParameters convolutionalParameters, DoubleTensor weightsTensor) -> DoubleBinaryConvolutionalLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        convolutionalParameters: ell::api::predictors::neural::BinaryConvolutionalParameters const &
        weightsTensor: ell::api::math::Tensor< double > const &

        """
        this = _ELL.new_DoubleBinaryConvolutionalLayer(layerParameters, convolutionalParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleBinaryConvolutionalLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::BinaryConvolutionalLayer< double > const *

        """
        return _ELL.DoubleBinaryConvolutionalLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.DoubleBinaryConvolutionalLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.DoubleBinaryConvolutionalLayer_weights_get)
    __swig_getmethods__["convolutionalParameters"] = _ELL.DoubleBinaryConvolutionalLayer_convolutionalParameters_get
    if _newclass:
        convolutionalParameters = _swig_property(_ELL.DoubleBinaryConvolutionalLayer_convolutionalParameters_get)
    __swig_destroy__ = _ELL.delete_DoubleBinaryConvolutionalLayer
    __del__ = lambda self: None
DoubleBinaryConvolutionalLayer_swigregister = _ELL.DoubleBinaryConvolutionalLayer_swigregister
DoubleBinaryConvolutionalLayer_swigregister(DoubleBinaryConvolutionalLayer)

class DoubleConvolutionalLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::ConvolutionalLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleConvolutionalLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleConvolutionalLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', convolutionalParameters: 'ConvolutionalParameters', weightsTensor: 'DoubleTensor'):
        """
        __init__(ell::api::predictors::neural::ConvolutionalLayer<(double)> self, LayerParameters layerParameters, ConvolutionalParameters convolutionalParameters, DoubleTensor weightsTensor) -> DoubleConvolutionalLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        convolutionalParameters: ell::api::predictors::neural::ConvolutionalParameters const &
        weightsTensor: ell::api::math::Tensor< double > const &

        """
        this = _ELL.new_DoubleConvolutionalLayer(layerParameters, convolutionalParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleConvolutionalLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ConvolutionalLayer< double > const *

        """
        return _ELL.DoubleConvolutionalLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.DoubleConvolutionalLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.DoubleConvolutionalLayer_weights_get)
    __swig_getmethods__["convolutionalParameters"] = _ELL.DoubleConvolutionalLayer_convolutionalParameters_get
    if _newclass:
        convolutionalParameters = _swig_property(_ELL.DoubleConvolutionalLayer_convolutionalParameters_get)
    __swig_destroy__ = _ELL.delete_DoubleConvolutionalLayer
    __del__ = lambda self: None
DoubleConvolutionalLayer_swigregister = _ELL.DoubleConvolutionalLayer_swigregister
DoubleConvolutionalLayer_swigregister(DoubleConvolutionalLayer)

class DoubleFullyConnectedLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::FullyConnectedLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleFullyConnectedLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleFullyConnectedLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', weightsTensor: 'DoubleTensor'):
        """
        __init__(ell::api::predictors::neural::FullyConnectedLayer<(double)> self, LayerParameters layerParameters, DoubleTensor weightsTensor) -> DoubleFullyConnectedLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        weightsTensor: ell::api::math::Tensor< double > const &

        """
        this = _ELL.new_DoubleFullyConnectedLayer(layerParameters, weightsTensor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleFullyConnectedLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::FullyConnectedLayer< double > const *

        """
        return _ELL.DoubleFullyConnectedLayer_GetLayerType(self)

    __swig_getmethods__["weights"] = _ELL.DoubleFullyConnectedLayer_weights_get
    if _newclass:
        weights = _swig_property(_ELL.DoubleFullyConnectedLayer_weights_get)
    __swig_destroy__ = _ELL.delete_DoubleFullyConnectedLayer
    __del__ = lambda self: None
DoubleFullyConnectedLayer_swigregister = _ELL.DoubleFullyConnectedLayer_swigregister
DoubleFullyConnectedLayer_swigregister(DoubleFullyConnectedLayer)

class DoublePoolingLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::PoolingLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoublePoolingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoublePoolingLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', poolingParameters: 'PoolingParameters', poolingType: 'ell::api::predictors::neural::PoolingType'):
        """
        __init__(ell::api::predictors::neural::PoolingLayer<(double)> self, LayerParameters layerParameters, PoolingParameters poolingParameters, ell::api::predictors::neural::PoolingType poolingType) -> DoublePoolingLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        poolingParameters: ell::api::predictors::neural::PoolingParameters const &
        poolingType: enum ell::api::predictors::neural::PoolingType

        """
        this = _ELL.new_DoublePoolingLayer(layerParameters, poolingParameters, poolingType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoublePoolingLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::PoolingLayer< double > const *

        """
        return _ELL.DoublePoolingLayer_GetLayerType(self)

    __swig_getmethods__["poolingType"] = _ELL.DoublePoolingLayer_poolingType_get
    if _newclass:
        poolingType = _swig_property(_ELL.DoublePoolingLayer_poolingType_get)
    __swig_getmethods__["poolingParameters"] = _ELL.DoublePoolingLayer_poolingParameters_get
    if _newclass:
        poolingParameters = _swig_property(_ELL.DoublePoolingLayer_poolingParameters_get)
    __swig_destroy__ = _ELL.delete_DoublePoolingLayer
    __del__ = lambda self: None
DoublePoolingLayer_swigregister = _ELL.DoublePoolingLayer_swigregister
DoublePoolingLayer_swigregister(DoublePoolingLayer)

class DoubleScalingLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::ScalingLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleScalingLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleScalingLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters', scales: 'DoubleVector'):
        """
        __init__(ell::api::predictors::neural::ScalingLayer<(double)> self, LayerParameters layerParameters, DoubleVector scales) -> DoubleScalingLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &
        scales: std::vector< double,std::allocator< double > > const &

        """
        this = _ELL.new_DoubleScalingLayer(layerParameters, scales)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleScalingLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::ScalingLayer< double > const *

        """
        return _ELL.DoubleScalingLayer_GetLayerType(self)

    __swig_getmethods__["scales"] = _ELL.DoubleScalingLayer_scales_get
    if _newclass:
        scales = _swig_property(_ELL.DoubleScalingLayer_scales_get)
    __swig_destroy__ = _ELL.delete_DoubleScalingLayer
    __del__ = lambda self: None
DoubleScalingLayer_swigregister = _ELL.DoubleScalingLayer_swigregister
DoubleScalingLayer_swigregister(DoubleScalingLayer)

class DoubleSoftmaxLayer(DoubleLayer):
    """Proxy of C++ ell::api::predictors::neural::SoftmaxLayer<(double)> class."""

    __swig_setmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleSoftmaxLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleLayer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleSoftmaxLayer, name)
    __repr__ = _swig_repr

    def __init__(self, layerParameters: 'LayerParameters'):
        """
        __init__(ell::api::predictors::neural::SoftmaxLayer<(double)> self, LayerParameters layerParameters) -> DoubleSoftmaxLayer

        Parameters
        ----------
        layerParameters: ell::api::predictors::neural::LayerParameters const &

        """
        this = _ELL.new_DoubleSoftmaxLayer(layerParameters)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetLayerType(self) -> "ell::api::predictors::neural::LayerType":
        """
        GetLayerType(DoubleSoftmaxLayer self) -> ell::api::predictors::neural::LayerType

        Parameters
        ----------
        self: ell::api::predictors::neural::SoftmaxLayer< double > const *

        """
        return _ELL.DoubleSoftmaxLayer_GetLayerType(self)

    __swig_destroy__ = _ELL.delete_DoubleSoftmaxLayer
    __del__ = lambda self: None
DoubleSoftmaxLayer_swigregister = _ELL.DoubleSoftmaxLayer_swigregister
DoubleSoftmaxLayer_swigregister(DoubleSoftmaxLayer)

class DoubleLayerVector(_object):
    """Proxy of C++ std::vector<(p.ell::api::predictors::neural::Layer<(double)>)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleLayerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleLayerVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """
        iterator(DoubleLayerVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """
        __nonzero__(DoubleLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """
        __bool__(DoubleLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector___bool__(self)


    def __len__(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::size_type":
        """
        __len__(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector___len__(self)


    def __getslice__(self, i: 'std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type', j: 'std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type') -> "std::vector< ell::api::predictors::neural::Layer< double > *,std::allocator< ell::api::predictors::neural::Layer< double > * > > *":
        """
        __getslice__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type j) -> DoubleLayerVector

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type

        """
        return _ELL.DoubleLayerVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type j)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type

        __setslice__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type j, DoubleLayerVector v)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        v: std::vector< ell::api::predictors::neural::Layer< double > *,std::allocator< ell::api::predictors::neural::Layer< double > * > > const &

        """
        return _ELL.DoubleLayerVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type', j: 'std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type') -> "void":
        """
        __delslice__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type j)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        j: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type

        """
        return _ELL.DoubleLayerVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type

        __delitem__(DoubleLayerVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ELL.DoubleLayerVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::value_type":
        """
        __getitem__(DoubleLayerVector self, PySliceObject * slice) -> DoubleLayerVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i) -> DoubleLayer

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type

        """
        return _ELL.DoubleLayerVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleLayerVector self, PySliceObject * slice, DoubleLayerVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< ell::api::predictors::neural::Layer< double > *,std::allocator< ell::api::predictors::neural::Layer< double > * > > const &

        __setitem__(DoubleLayerVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type i, DoubleLayer x)

        Parameters
        ----------
        i: std::vector< ell::api::predictors::neural::Layer< double > * >::difference_type
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector___setitem__(self, *args)


    def pop(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::value_type":
        """
        pop(DoubleLayerVector self) -> DoubleLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_pop(self)


    def append(self, x: 'DoubleLayer') -> "void":
        """
        append(DoubleLayerVector self, DoubleLayer x)

        Parameters
        ----------
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector_append(self, x)


    def empty(self) -> "bool":
        """
        empty(DoubleLayerVector self) -> bool

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_empty(self)


    def size(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::size_type":
        """
        size(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_size(self)


    def swap(self, v: 'DoubleLayerVector') -> "void":
        """
        swap(DoubleLayerVector self, DoubleLayerVector v)

        Parameters
        ----------
        v: std::vector< ell::api::predictors::neural::Layer< double > * > &

        """
        return _ELL.DoubleLayerVector_swap(self, v)


    def begin(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::iterator":
        """
        begin(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_begin(self)


    def end(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::iterator":
        """
        end(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_end(self)


    def rbegin(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::reverse_iterator":
        """
        rbegin(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_rbegin(self)


    def rend(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::reverse_iterator":
        """
        rend(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::reverse_iterator

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_rend(self)


    def clear(self) -> "void":
        """
        clear(DoubleLayerVector self)

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_clear(self)


    def get_allocator(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::allocator_type":
        """
        get_allocator(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::allocator_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_get_allocator(self)


    def pop_back(self) -> "void":
        """
        pop_back(DoubleLayerVector self)

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > *

        """
        return _ELL.DoubleLayerVector_pop_back(self)


    def erase(self, *args) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::iterator":
        """
        erase(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::iterator pos) -> std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        erase(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::iterator first, std::vector< ell::api::predictors::neural::Layer< double > * >::iterator last) -> std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        Parameters
        ----------
        first: std::vector< ell::api::predictors::neural::Layer< double > * >::iterator
        last: std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        """
        return _ELL.DoubleLayerVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(double)>)> self) -> DoubleLayerVector
        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(double)>)> self, DoubleLayerVector arg2) -> DoubleLayerVector

        Parameters
        ----------
        arg2: std::vector< ell::api::predictors::neural::Layer< double > * > const &

        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(double)>)> self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type size) -> DoubleLayerVector

        Parameters
        ----------
        size: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        __init__(std::vector<(p.ell::api::predictors::neural::Layer<(double)>)> self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type size, DoubleLayer value) -> DoubleLayerVector

        Parameters
        ----------
        size: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type
        value: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        this = _ELL.new_DoubleLayerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'DoubleLayer') -> "void":
        """
        push_back(DoubleLayerVector self, DoubleLayer x)

        Parameters
        ----------
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector_push_back(self, x)


    def front(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::value_type":
        """
        front(DoubleLayerVector self) -> DoubleLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_front(self)


    def back(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::value_type":
        """
        back(DoubleLayerVector self) -> DoubleLayer

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_back(self)


    def assign(self, n: 'std::vector< ell::api::predictors::neural::Layer< double > * >::size_type', x: 'DoubleLayer') -> "void":
        """
        assign(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type n, DoubleLayer x)

        Parameters
        ----------
        n: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        resize(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type new_size, DoubleLayer x)

        Parameters
        ----------
        new_size: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::iterator pos, DoubleLayer x) -> std::vector< ell::api::predictors::neural::Layer< double > * >::iterator

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< double > * >::iterator
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        insert(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::iterator pos, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type n, DoubleLayer x)

        Parameters
        ----------
        pos: std::vector< ell::api::predictors::neural::Layer< double > * >::iterator
        n: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type
        x: std::vector< ell::api::predictors::neural::Layer< double > * >::value_type

        """
        return _ELL.DoubleLayerVector_insert(self, *args)


    def reserve(self, n: 'std::vector< ell::api::predictors::neural::Layer< double > * >::size_type') -> "void":
        """
        reserve(DoubleLayerVector self, std::vector< ell::api::predictors::neural::Layer< double > * >::size_type n)

        Parameters
        ----------
        n: std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        """
        return _ELL.DoubleLayerVector_reserve(self, n)


    def capacity(self) -> "std::vector< ell::api::predictors::neural::Layer< double > * >::size_type":
        """
        capacity(DoubleLayerVector self) -> std::vector< ell::api::predictors::neural::Layer< double > * >::size_type

        Parameters
        ----------
        self: std::vector< ell::api::predictors::neural::Layer< double > * > const *

        """
        return _ELL.DoubleLayerVector_capacity(self)

    __swig_destroy__ = _ELL.delete_DoubleLayerVector
    __del__ = lambda self: None
DoubleLayerVector_swigregister = _ELL.DoubleLayerVector_swigregister
DoubleLayerVector_swigregister(DoubleLayerVector)

class DoubleNeuralNetworkPredictor(_object):
    """Proxy of C++ ell::api::predictors::NeuralNetworkPredictor<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleNeuralNetworkPredictor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleNeuralNetworkPredictor, name)
    __repr__ = _swig_repr

    def __init__(self, layers: 'DoubleLayerVector'):
        """
        __init__(ell::api::predictors::NeuralNetworkPredictor<(double)> self, DoubleLayerVector layers) -> DoubleNeuralNetworkPredictor

        Parameters
        ----------
        layers: std::vector< ell::api::predictors::NeuralNetworkPredictor< double >::Layer *,std::allocator< ell::api::predictors::NeuralNetworkPredictor< double >::Layer * > > const &

        """
        this = _ELL.new_DoubleNeuralNetworkPredictor(layers)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Predict(self, input: 'DoubleVector') -> "std::vector< double,std::allocator< double > >":
        """
        Predict(DoubleNeuralNetworkPredictor self, DoubleVector input) -> DoubleVector

        Parameters
        ----------
        input: std::vector< double,std::allocator< double > > const &

        """
        return _ELL.DoubleNeuralNetworkPredictor_Predict(self, input)


    def GetInputShape(self) -> "ell::api::predictors::neural::LayerShape":
        """
        GetInputShape(DoubleNeuralNetworkPredictor self) -> LayerShape

        Parameters
        ----------
        self: ell::api::predictors::NeuralNetworkPredictor< double > const *

        """
        return _ELL.DoubleNeuralNetworkPredictor_GetInputShape(self)


    def GetOutputShape(self) -> "ell::api::predictors::neural::LayerShape":
        """
        GetOutputShape(DoubleNeuralNetworkPredictor self) -> LayerShape

        Parameters
        ----------
        self: ell::api::predictors::NeuralNetworkPredictor< double > const *

        """
        return _ELL.DoubleNeuralNetworkPredictor_GetOutputShape(self)

    __swig_destroy__ = _ELL.delete_DoubleNeuralNetworkPredictor
    __del__ = lambda self: None
DoubleNeuralNetworkPredictor_swigregister = _ELL.DoubleNeuralNetworkPredictor_swigregister
DoubleNeuralNetworkPredictor_swigregister(DoubleNeuralNetworkPredictor)



# Python friendly class for PaddingScheme
class PaddingScheme:
    zeros = PaddingScheme_zeros
    minusOnes = PaddingScheme_minusOnes
    alternatingZeroAndOnes = PaddingScheme_alternatingZeroAndOnes
    randomZeroAndOnes = PaddingScheme_randomZeroAndOnes
    min = PaddingScheme_min
    max = PaddingScheme_max

# Remove flat defines so callers only see the class above
del PaddingScheme_zeros
del PaddingScheme_minusOnes
del PaddingScheme_alternatingZeroAndOnes
del PaddingScheme_randomZeroAndOnes
del PaddingScheme_min
del PaddingScheme_max

# Python friendly class for LayerType
class LayerType:
    base = LayerType_base
    activation = LayerType_activation
    batchNormalization = LayerType_batchNormalization
    bias = LayerType_bias
    binaryConvolution = LayerType_binaryConvolution
    convolution = LayerType_convolution
    fullyConnected = LayerType_fullyConnected
    input = LayerType_input
    pooling = LayerType_pooling
    scaling = LayerType_scaling
    softmax = LayerType_softmax

# Remove flat defines so callers only see the class above
del LayerType_base
del LayerType_activation
del LayerType_batchNormalization
del LayerType_bias
del LayerType_binaryConvolution
del LayerType_convolution
del LayerType_fullyConnected
del LayerType_input
del LayerType_pooling
del LayerType_scaling
del LayerType_softmax

# Python friendly class for ActivationType
class ActivationType:
    relu = ActivationType_relu
    leaky = ActivationType_leaky
    sigmoid = ActivationType_sigmoid

# Remove flat defines so callers only see the class above
del ActivationType_relu
del ActivationType_leaky
del ActivationType_sigmoid

# Python friendly class for PoolingType
class PoolingType:
    max = PoolingType_max
    mean = PoolingType_mean

# Remove flat defines so callers only see the class above
del PoolingType_max
del PoolingType_mean

# Python friendly class for BinaryConvolutionMethod
class BinaryConvolutionMethod:
    gemm = BinaryConvolutionMethod_gemm
    bitwise = BinaryConvolutionMethod_bitwise

# Remove flat defines so callers only see the class above
del BinaryConvolutionMethod_gemm
del BinaryConvolutionMethod_bitwise

# Python friendly class for ConvolutionMethod
class ConvolutionMethod:
    columnwise = ConvolutionMethod_columnwise
    diagonal = ConvolutionMethod_diagonal

# Remove flat defines so callers only see the class above
del ConvolutionMethod_columnwise
del ConvolutionMethod_diagonal


ELL_ClockType_steadyClock = _ELL.ELL_ClockType_steadyClock
ELL_ClockType_systemClock = _ELL.ELL_ClockType_systemClock
ELL_PortType_none = _ELL.ELL_PortType_none
ELL_PortType_smallReal = _ELL.ELL_PortType_smallReal
ELL_PortType_real = _ELL.ELL_PortType_real
ELL_PortType_integer = _ELL.ELL_PortType_integer
ELL_PortType_bigInt = _ELL.ELL_PortType_bigInt
ELL_PortType_categorical = _ELL.ELL_PortType_categorical
ELL_PortType_boolean = _ELL.ELL_PortType_boolean
class ELL_Port(_object):
    """Proxy of C++ ELL_API::ELL_Port class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_Port, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_Port, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_Port self) -> ELL_Port"""
        this = _ELL.new_ELL_Port()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetNode(self) -> "ELL_API::ELL_Node":
        """
        GetNode(ELL_Port self) -> ELL_Node

        Parameters
        ----------
        self: ELL_API::ELL_Port *

        """
        return _ELL.ELL_Port_GetNode(self)


    def GetName(self) -> "std::string":
        """
        GetName(ELL_Port self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_Port *

        """
        return _ELL.ELL_Port_GetName(self)


    def GetRuntimeTypeName(self) -> "std::string":
        """
        GetRuntimeTypeName(ELL_Port self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_Port *

        """
        return _ELL.ELL_Port_GetRuntimeTypeName(self)


    def GetOutputType(self) -> "ELL_API::ELL_PortType":
        """
        GetOutputType(ELL_Port self) -> ELL_API::ELL_PortType

        Parameters
        ----------
        self: ELL_API::ELL_Port *

        """
        return _ELL.ELL_Port_GetOutputType(self)


    def Size(self) -> "int":
        """
        Size(ELL_Port self) -> int

        Parameters
        ----------
        self: ELL_API::ELL_Port *

        """
        return _ELL.ELL_Port_Size(self)

    __swig_destroy__ = _ELL.delete_ELL_Port
    __del__ = lambda self: None
ELL_Port_swigregister = _ELL.ELL_Port_swigregister
ELL_Port_swigregister(ELL_Port)

class ELL_InputPortIterator(_object):
    """Proxy of C++ ELL_API::ELL_InputPortIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_InputPortIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_InputPortIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_InputPortIterator self) -> ELL_InputPortIterator"""
        this = _ELL.new_ELL_InputPortIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self) -> "bool":
        """
        IsValid(ELL_InputPortIterator self) -> bool

        Parameters
        ----------
        self: ELL_API::ELL_InputPortIterator *

        """
        return _ELL.ELL_InputPortIterator_IsValid(self)


    def Next(self) -> "void":
        """
        Next(ELL_InputPortIterator self)

        Parameters
        ----------
        self: ELL_API::ELL_InputPortIterator *

        """
        return _ELL.ELL_InputPortIterator_Next(self)


    def Get(self) -> "ELL_API::ELL_InputPort":
        """
        Get(ELL_InputPortIterator self) -> ELL_InputPort

        Parameters
        ----------
        self: ELL_API::ELL_InputPortIterator *

        """
        return _ELL.ELL_InputPortIterator_Get(self)

    __swig_destroy__ = _ELL.delete_ELL_InputPortIterator
    __del__ = lambda self: None
ELL_InputPortIterator_swigregister = _ELL.ELL_InputPortIterator_swigregister
ELL_InputPortIterator_swigregister(ELL_InputPortIterator)

class ELL_OutputPortIterator(_object):
    """Proxy of C++ ELL_API::ELL_OutputPortIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_OutputPortIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_OutputPortIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_OutputPortIterator self) -> ELL_OutputPortIterator"""
        this = _ELL.new_ELL_OutputPortIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self) -> "bool":
        """
        IsValid(ELL_OutputPortIterator self) -> bool

        Parameters
        ----------
        self: ELL_API::ELL_OutputPortIterator *

        """
        return _ELL.ELL_OutputPortIterator_IsValid(self)


    def Next(self) -> "void":
        """
        Next(ELL_OutputPortIterator self)

        Parameters
        ----------
        self: ELL_API::ELL_OutputPortIterator *

        """
        return _ELL.ELL_OutputPortIterator_Next(self)


    def Get(self) -> "ELL_API::ELL_OutputPort":
        """
        Get(ELL_OutputPortIterator self) -> ELL_OutputPort

        Parameters
        ----------
        self: ELL_API::ELL_OutputPortIterator *

        """
        return _ELL.ELL_OutputPortIterator_Get(self)

    __swig_destroy__ = _ELL.delete_ELL_OutputPortIterator
    __del__ = lambda self: None
ELL_OutputPortIterator_swigregister = _ELL.ELL_OutputPortIterator_swigregister
ELL_OutputPortIterator_swigregister(ELL_OutputPortIterator)

class ELL_NodeIterator(_object):
    """Proxy of C++ ELL_API::ELL_NodeIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_NodeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_NodeIterator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_NodeIterator self) -> ELL_NodeIterator"""
        this = _ELL.new_ELL_NodeIterator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self) -> "bool":
        """
        IsValid(ELL_NodeIterator self) -> bool

        Parameters
        ----------
        self: ELL_API::ELL_NodeIterator *

        """
        return _ELL.ELL_NodeIterator_IsValid(self)


    def Next(self) -> "void":
        """
        Next(ELL_NodeIterator self)

        Parameters
        ----------
        self: ELL_API::ELL_NodeIterator *

        """
        return _ELL.ELL_NodeIterator_Next(self)


    def Get(self) -> "ELL_API::ELL_Node":
        """
        Get(ELL_NodeIterator self) -> ELL_Node

        Parameters
        ----------
        self: ELL_API::ELL_NodeIterator *

        """
        return _ELL.ELL_NodeIterator_Get(self)

    __swig_destroy__ = _ELL.delete_ELL_NodeIterator
    __del__ = lambda self: None
ELL_NodeIterator_swigregister = _ELL.ELL_NodeIterator_swigregister
ELL_NodeIterator_swigregister(ELL_NodeIterator)

class ELL_Node(_object):
    """Proxy of C++ ELL_API::ELL_Node class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_Node, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_Node self) -> ELL_Node
        __init__(ELL_API::ELL_Node self, ELL_Node arg2) -> ELL_Node

        Parameters
        ----------
        arg2: ELL_API::ELL_Node const &

        """
        this = _ELL.new_ELL_Node(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetId(self) -> "std::string":
        """
        GetId(ELL_Node self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetId(self)


    def GetParents(self) -> "ELL_API::ELL_NodeIterator":
        """
        GetParents(ELL_Node self) -> ELL_NodeIterator

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetParents(self)


    def GetDependents(self) -> "ELL_API::ELL_NodeIterator":
        """
        GetDependents(ELL_Node self) -> ELL_NodeIterator

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetDependents(self)


    def GetOutputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_OutputPort":
        """
        GetOutputPort(ELL_Node self, std::string const & portName) -> ELL_OutputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_Node_GetOutputPort(self, portName)


    def GetInputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_InputPort":
        """
        GetInputPort(ELL_Node self, std::string const & portName) -> ELL_InputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_Node_GetInputPort(self, portName)


    def GetPort(self, portName: 'std::string const &') -> "ELL_API::ELL_Port":
        """
        GetPort(ELL_Node self, std::string const & portName) -> ELL_Port

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_Node_GetPort(self, portName)


    def GetOutputPorts(self) -> "ELL_API::ELL_OutputPortIterator":
        """
        GetOutputPorts(ELL_Node self) -> ELL_OutputPortIterator

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetOutputPorts(self)


    def GetInputPorts(self) -> "ELL_API::ELL_InputPortIterator":
        """
        GetInputPorts(ELL_Node self) -> ELL_InputPortIterator

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetInputPorts(self)


    def GetRuntimeTypeName(self) -> "std::string":
        """
        GetRuntimeTypeName(ELL_Node self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_Node *

        """
        return _ELL.ELL_Node_GetRuntimeTypeName(self)

    __swig_destroy__ = _ELL.delete_ELL_Node
    __del__ = lambda self: None
ELL_Node_swigregister = _ELL.ELL_Node_swigregister
ELL_Node_swigregister(ELL_Node)

class ELL_InputNode(ELL_Node):
    """Proxy of C++ ELL_API::ELL_InputNode class."""

    __swig_setmethods__ = {}
    for _s in [ELL_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_InputNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ELL_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_InputNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_InputNode self, ELL_InputNode node) -> ELL_InputNode

        Parameters
        ----------
        node: ELL_API::ELL_InputNode const &

        __init__(ELL_API::ELL_InputNode self, ELL_Node node) -> ELL_InputNode

        Parameters
        ----------
        node: ELL_API::ELL_Node

        """
        this = _ELL.new_ELL_InputNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_InputPort":
        """
        GetInputPort(ELL_InputNode self, std::string const & portName) -> ELL_InputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_InputNode_GetInputPort(self, portName)


    def GetOutputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_OutputPort":
        """
        GetOutputPort(ELL_InputNode self, std::string const & portName) -> ELL_OutputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_InputNode_GetOutputPort(self, portName)

    __swig_destroy__ = _ELL.delete_ELL_InputNode
    __del__ = lambda self: None
ELL_InputNode_swigregister = _ELL.ELL_InputNode_swigregister
ELL_InputNode_swigregister(ELL_InputNode)

class ELL_OutputNode(ELL_Node):
    """Proxy of C++ ELL_API::ELL_OutputNode class."""

    __swig_setmethods__ = {}
    for _s in [ELL_Node]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_OutputNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ELL_Node]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_OutputNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_OutputNode self, ELL_OutputNode node) -> ELL_OutputNode

        Parameters
        ----------
        node: ELL_API::ELL_OutputNode const &

        __init__(ELL_API::ELL_OutputNode self, ELL_Node node) -> ELL_OutputNode

        Parameters
        ----------
        node: ELL_API::ELL_Node

        """
        this = _ELL.new_ELL_OutputNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetInputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_InputPort":
        """
        GetInputPort(ELL_OutputNode self, std::string const & portName) -> ELL_InputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_OutputNode_GetInputPort(self, portName)


    def GetOutputPort(self, portName: 'std::string const &') -> "ELL_API::ELL_OutputPort":
        """
        GetOutputPort(ELL_OutputNode self, std::string const & portName) -> ELL_OutputPort

        Parameters
        ----------
        portName: std::string const &

        """
        return _ELL.ELL_OutputNode_GetOutputPort(self, portName)

    __swig_destroy__ = _ELL.delete_ELL_OutputNode
    __del__ = lambda self: None
ELL_OutputNode_swigregister = _ELL.ELL_OutputNode_swigregister
ELL_OutputNode_swigregister(ELL_OutputNode)

class ELL_PortElement(_object):
    """Proxy of C++ ELL_API::ELL_PortElement class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_PortElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_PortElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_PortElement self) -> ELL_PortElement"""
        this = _ELL.new_ELL_PortElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetIndex(self) -> "int":
        """
        GetIndex(ELL_PortElement self) -> int

        Parameters
        ----------
        self: ELL_API::ELL_PortElement *

        """
        return _ELL.ELL_PortElement_GetIndex(self)


    def GetType(self) -> "ELL_API::ELL_PortType":
        """
        GetType(ELL_PortElement self) -> ELL_API::ELL_PortType

        Parameters
        ----------
        self: ELL_API::ELL_PortElement *

        """
        return _ELL.ELL_PortElement_GetType(self)


    def ReferencedPort(self) -> "ELL_API::ELL_OutputPort":
        """
        ReferencedPort(ELL_PortElement self) -> ELL_OutputPort

        Parameters
        ----------
        self: ELL_API::ELL_PortElement *

        """
        return _ELL.ELL_PortElement_ReferencedPort(self)

    __swig_destroy__ = _ELL.delete_ELL_PortElement
    __del__ = lambda self: None
ELL_PortElement_swigregister = _ELL.ELL_PortElement_swigregister
ELL_PortElement_swigregister(ELL_PortElement)

class ELL_PortElements(_object):
    """Proxy of C++ ELL_API::ELL_PortElements class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_PortElements, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_PortElements, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_PortElements self) -> ELL_PortElements
        __init__(ELL_API::ELL_PortElements self, ELL_OutputPort port) -> ELL_PortElements

        Parameters
        ----------
        port: ELL_API::ELL_OutputPort const &

        """
        this = _ELL.new_ELL_PortElements(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "int":
        """
        Size(ELL_PortElements self) -> int

        Parameters
        ----------
        self: ELL_API::ELL_PortElements const *

        """
        return _ELL.ELL_PortElements_Size(self)


    def GetType(self) -> "ELL_API::ELL_PortType":
        """
        GetType(ELL_PortElements self) -> ELL_API::ELL_PortType

        Parameters
        ----------
        self: ELL_API::ELL_PortElements const *

        """
        return _ELL.ELL_PortElements_GetType(self)


    def GetElement(self, index: 'int') -> "ELL_API::ELL_PortElement":
        """
        GetElement(ELL_PortElements self, int index) -> ELL_PortElement

        Parameters
        ----------
        index: int

        """
        return _ELL.ELL_PortElements_GetElement(self, index)

    __swig_destroy__ = _ELL.delete_ELL_PortElements
    __del__ = lambda self: None
ELL_PortElements_swigregister = _ELL.ELL_PortElements_swigregister
ELL_PortElements_swigregister(ELL_PortElements)

class ELL_InputPort(_object):
    """Proxy of C++ ELL_API::ELL_InputPort class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_InputPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_InputPort, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_InputPort self) -> ELL_InputPort"""
        this = _ELL.new_ELL_InputPort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "int":
        """
        Size(ELL_InputPort self) -> int

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_Size(self)


    def GetNode(self) -> "ELL_API::ELL_Node":
        """
        GetNode(ELL_InputPort self) -> ELL_Node

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetNode(self)


    def GetName(self) -> "std::string":
        """
        GetName(ELL_InputPort self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetName(self)


    def GetOutputType(self) -> "ELL_API::ELL_PortType":
        """
        GetOutputType(ELL_InputPort self) -> ELL_API::ELL_PortType

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetOutputType(self)


    def GetRuntimeTypeName(self) -> "std::string":
        """
        GetRuntimeTypeName(ELL_InputPort self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetRuntimeTypeName(self)


    def GetParentNodes(self) -> "ELL_API::ELL_NodeIterator":
        """
        GetParentNodes(ELL_InputPort self) -> ELL_NodeIterator

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetParentNodes(self)


    def GetInputElements(self) -> "ELL_API::ELL_PortElements":
        """
        GetInputElements(ELL_InputPort self) -> ELL_PortElements

        Parameters
        ----------
        self: ELL_API::ELL_InputPort *

        """
        return _ELL.ELL_InputPort_GetInputElements(self)

    __swig_destroy__ = _ELL.delete_ELL_InputPort
    __del__ = lambda self: None
ELL_InputPort_swigregister = _ELL.ELL_InputPort_swigregister
ELL_InputPort_swigregister(ELL_InputPort)

class ELL_OutputPort(_object):
    """Proxy of C++ ELL_API::ELL_OutputPort class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_OutputPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_OutputPort, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_OutputPort self) -> ELL_OutputPort"""
        this = _ELL.new_ELL_OutputPort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self) -> "int":
        """
        Size(ELL_OutputPort self) -> int

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort *

        """
        return _ELL.ELL_OutputPort_Size(self)


    def GetNode(self) -> "ELL_API::ELL_Node":
        """
        GetNode(ELL_OutputPort self) -> ELL_Node

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort *

        """
        return _ELL.ELL_OutputPort_GetNode(self)


    def GetName(self) -> "std::string":
        """
        GetName(ELL_OutputPort self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort *

        """
        return _ELL.ELL_OutputPort_GetName(self)


    def GetOutputType(self) -> "ELL_API::ELL_PortType":
        """
        GetOutputType(ELL_OutputPort self) -> ELL_API::ELL_PortType

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort *

        """
        return _ELL.ELL_OutputPort_GetOutputType(self)


    def ReferencePort(self) -> "void":
        """
        ReferencePort(ELL_OutputPort self)

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort *

        """
        return _ELL.ELL_OutputPort_ReferencePort(self)


    def IsReferenced(self) -> "bool":
        """
        IsReferenced(ELL_OutputPort self) -> bool

        Parameters
        ----------
        self: ELL_API::ELL_OutputPort const *

        """
        return _ELL.ELL_OutputPort_IsReferenced(self)


    def GetDoubleOutput(self, *args) -> "double":
        """
        GetDoubleOutput(ELL_OutputPort self) -> DoubleVector
        GetDoubleOutput(ELL_OutputPort self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _ELL.ELL_OutputPort_GetDoubleOutput(self, *args)

    __swig_destroy__ = _ELL.delete_ELL_OutputPort
    __del__ = lambda self: None
ELL_OutputPort_swigregister = _ELL.ELL_OutputPort_swigregister
ELL_OutputPort_swigregister(ELL_OutputPort)

class ELL_Model(_object):
    """Proxy of C++ ELL_API::ELL_Model class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_Model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_Model, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_Model self) -> ELL_Model
        __init__(ELL_API::ELL_Model self, std::string const & filename) -> ELL_Model

        Parameters
        ----------
        filename: std::string const &

        """
        this = _ELL.new_ELL_Model(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Save(self, filename: 'std::string const &') -> "void":
        """
        Save(ELL_Model self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _ELL.ELL_Model_Save(self, filename)


    def Size(self) -> "size_t":
        """
        Size(ELL_Model self) -> size_t

        Parameters
        ----------
        self: ELL_API::ELL_Model *

        """
        return _ELL.ELL_Model_Size(self)


    def GetNodes(self) -> "ELL_API::ELL_NodeIterator":
        """
        GetNodes(ELL_Model self) -> ELL_NodeIterator

        Parameters
        ----------
        self: ELL_API::ELL_Model *

        """
        return _ELL.ELL_Model_GetNodes(self)


    def GetJson(self) -> "std::string":
        """
        GetJson(ELL_Model self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_Model const *

        """
        return _ELL.ELL_Model_GetJson(self)

    __swig_destroy__ = _ELL.delete_ELL_Model
    __del__ = lambda self: None
ELL_Model_swigregister = _ELL.ELL_Model_swigregister
ELL_Model_swigregister(ELL_Model)

class ELL_ModelBuilder(_object):
    """Proxy of C++ ELL_API::ELL_ModelBuilder class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_ModelBuilder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_ModelBuilder, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_ModelBuilder self) -> ELL_ModelBuilder"""
        this = _ELL.new_ELL_ModelBuilder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddNode(self, model: 'ELL_Model', nodeType: 'std::string const &', args: 'StringVector') -> "ELL_API::ELL_Node":
        """
        AddNode(ELL_ModelBuilder self, ELL_Model model, std::string const & nodeType, StringVector args) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        nodeType: std::string const &
        args: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _ELL.ELL_ModelBuilder_AddNode(self, model, nodeType, args)


    def AddDoubleNeuralNetworkPredictorNode(self, model: 'ELL_Model', input: 'ELL_PortElements', predictor: 'DoubleNeuralNetworkPredictor') -> "ELL_API::ELL_Node":
        """
        AddDoubleNeuralNetworkPredictorNode(ELL_ModelBuilder self, ELL_Model model, ELL_PortElements input, DoubleNeuralNetworkPredictor predictor) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        input: ELL_API::ELL_PortElements
        predictor: ell::api::predictors::NeuralNetworkPredictor< double >

        """
        return _ELL.ELL_ModelBuilder_AddDoubleNeuralNetworkPredictorNode(self, model, input, predictor)


    def AddFloatNeuralNetworkPredictorNode(self, model: 'ELL_Model', input: 'ELL_PortElements', predictor: 'FloatNeuralNetworkPredictor') -> "ELL_API::ELL_Node":
        """
        AddFloatNeuralNetworkPredictorNode(ELL_ModelBuilder self, ELL_Model model, ELL_PortElements input, FloatNeuralNetworkPredictor predictor) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        input: ELL_API::ELL_PortElements
        predictor: ell::api::predictors::NeuralNetworkPredictor< float >

        """
        return _ELL.ELL_ModelBuilder_AddFloatNeuralNetworkPredictorNode(self, model, input, predictor)


    def AddInputNode(self, model: 'ELL_Model', size: 'int', type: 'ELL_API::ELL_PortType') -> "ELL_API::ELL_Node":
        """
        AddInputNode(ELL_ModelBuilder self, ELL_Model model, int size, ELL_API::ELL_PortType type) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        size: int
        type: enum ELL_API::ELL_PortType

        """
        return _ELL.ELL_ModelBuilder_AddInputNode(self, model, size, type)


    def AddOutputNode(self, model: 'ELL_Model', input: 'ELL_PortElements') -> "ELL_API::ELL_Node":
        """
        AddOutputNode(ELL_ModelBuilder self, ELL_Model model, ELL_PortElements input) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        input: ELL_API::ELL_PortElements

        """
        return _ELL.ELL_ModelBuilder_AddOutputNode(self, model, input)


    def AddSinkNode(self, model: 'ELL_Model', input: 'ELL_PortElements', sinkFunctionName: 'std::string const &') -> "ELL_API::ELL_Node":
        """
        AddSinkNode(ELL_ModelBuilder self, ELL_Model model, ELL_PortElements input, std::string const & sinkFunctionName) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        input: ELL_API::ELL_PortElements
        sinkFunctionName: std::string const &

        """
        return _ELL.ELL_ModelBuilder_AddSinkNode(self, model, input, sinkFunctionName)


    def AddSourceNode(self, model: 'ELL_Model', input: 'ELL_PortElements', outputType: 'ELL_API::ELL_PortType', outputSize: 'int', sourceFunctionName: 'std::string const &') -> "ELL_API::ELL_Node":
        """
        AddSourceNode(ELL_ModelBuilder self, ELL_Model model, ELL_PortElements input, ELL_API::ELL_PortType outputType, int outputSize, std::string const & sourceFunctionName) -> ELL_Node

        Parameters
        ----------
        model: ELL_API::ELL_Model
        input: ELL_API::ELL_PortElements
        outputType: enum ELL_API::ELL_PortType
        outputSize: int
        sourceFunctionName: std::string const &

        """
        return _ELL.ELL_ModelBuilder_AddSourceNode(self, model, input, outputType, outputSize, sourceFunctionName)

    __swig_destroy__ = _ELL.delete_ELL_ModelBuilder
    __del__ = lambda self: None
ELL_ModelBuilder_swigregister = _ELL.ELL_ModelBuilder_swigregister
ELL_ModelBuilder_swigregister(ELL_ModelBuilder)

class ELL_TransformContext(_object):
    """Proxy of C++ ELL_API::ELL_TransformContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_TransformContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_TransformContext, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ELL_API::ELL_TransformContext self) -> ELL_TransformContext"""
        this = _ELL.new_ELL_TransformContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ELL.delete_ELL_TransformContext
    __del__ = lambda self: None
ELL_TransformContext_swigregister = _ELL.ELL_TransformContext_swigregister
ELL_TransformContext_swigregister(ELL_TransformContext)

class ELL_Map(_object):
    """Proxy of C++ ELL_API::ELL_Map class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_Map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_Map, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_Map self, ELL_Map other) -> ELL_Map

        Parameters
        ----------
        other: ELL_API::ELL_Map const &

        __init__(ELL_API::ELL_Map self, ELL_Model model, ELL_InputNode inputNode, ELL_PortElements output) -> ELL_Map

        Parameters
        ----------
        model: ELL_API::ELL_Model
        inputNode: ELL_API::ELL_InputNode
        output: ELL_API::ELL_PortElements

        """
        this = _ELL.new_ELL_Map(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ComputeDouble(self, inputData: 'DoubleVector') -> "std::vector< double,std::allocator< double > >":
        """
        ComputeDouble(ELL_Map self, DoubleVector inputData) -> DoubleVector

        Parameters
        ----------
        inputData: std::vector< double,std::allocator< double > > const &

        """
        return _ELL.ELL_Map_ComputeDouble(self, inputData)


    def ComputeFloat(self, inputData: 'FloatVector') -> "std::vector< float,std::allocator< float > >":
        """
        ComputeFloat(ELL_Map self, FloatVector inputData) -> FloatVector

        Parameters
        ----------
        inputData: std::vector< float,std::allocator< float > > const &

        """
        return _ELL.ELL_Map_ComputeFloat(self, inputData)


    def Save(self, filePath: 'std::string const &') -> "void":
        """
        Save(ELL_Map self, std::string const & filePath)

        Parameters
        ----------
        filePath: std::string const &

        """
        return _ELL.ELL_Map_Save(self, filePath)


    def Compile(self, targetDevice: 'std::string const &', moduleName: 'std::string const &', functionName: 'std::string const &', filePath: 'std::string const &') -> "void":
        """
        Compile(ELL_Map self, std::string const & targetDevice, std::string const & moduleName, std::string const & functionName, std::string const & filePath)

        Parameters
        ----------
        targetDevice: std::string const &
        moduleName: std::string const &
        functionName: std::string const &
        filePath: std::string const &

        """
        return _ELL.ELL_Map_Compile(self, targetDevice, moduleName, functionName, filePath)

    __swig_destroy__ = _ELL.delete_ELL_Map
    __del__ = lambda self: None
ELL_Map_swigregister = _ELL.ELL_Map_swigregister
ELL_Map_swigregister(ELL_Map)

class ELL_SteppableMap(_object):
    """Proxy of C++ ELL_API::ELL_SteppableMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_SteppableMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_SteppableMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ELL_API::ELL_SteppableMap self, ELL_SteppableMap other) -> ELL_SteppableMap

        Parameters
        ----------
        other: ELL_API::ELL_SteppableMap const &

        __init__(ELL_API::ELL_SteppableMap self, ELL_Model model, ELL_InputNode inputNode, ELL_PortElements output, ELL_API::ELL_ClockType clockType, int millisecondInterval) -> ELL_SteppableMap

        Parameters
        ----------
        model: ELL_API::ELL_Model
        inputNode: ELL_API::ELL_InputNode
        output: ELL_API::ELL_PortElements
        clockType: enum ELL_API::ELL_ClockType
        millisecondInterval: int

        """
        this = _ELL.new_ELL_SteppableMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Save(self, filePath: 'std::string const &') -> "void":
        """
        Save(ELL_SteppableMap self, std::string const & filePath)

        Parameters
        ----------
        filePath: std::string const &

        """
        return _ELL.ELL_SteppableMap_Save(self, filePath)

    __swig_destroy__ = _ELL.delete_ELL_SteppableMap
    __del__ = lambda self: None
ELL_SteppableMap_swigregister = _ELL.ELL_SteppableMap_swigregister
ELL_SteppableMap_swigregister(ELL_SteppableMap)

class ELL_CompiledMap(_object):
    """Proxy of C++ ELL_API::ELL_CompiledMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ELL_CompiledMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ELL_CompiledMap, name)
    __repr__ = _swig_repr

    def __init__(self, other: 'ELL_CompiledMap'):
        """
        __init__(ELL_API::ELL_CompiledMap self, ELL_CompiledMap other) -> ELL_CompiledMap

        Parameters
        ----------
        other: ELL_API::ELL_CompiledMap const &

        """
        this = _ELL.new_ELL_CompiledMap(other)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCodeString(self) -> "std::string":
        """
        GetCodeString(ELL_CompiledMap self) -> std::string

        Parameters
        ----------
        self: ELL_API::ELL_CompiledMap *

        """
        return _ELL.ELL_CompiledMap_GetCodeString(self)


    def ComputeDouble(self, inputData: 'DoubleVector') -> "std::vector< double,std::allocator< double > >":
        """
        ComputeDouble(ELL_CompiledMap self, DoubleVector inputData) -> DoubleVector

        Parameters
        ----------
        inputData: std::vector< double,std::allocator< double > > const &

        """
        return _ELL.ELL_CompiledMap_ComputeDouble(self, inputData)


    def ComputeFloat(self, inputData: 'FloatVector') -> "std::vector< float,std::allocator< float > >":
        """
        ComputeFloat(ELL_CompiledMap self, FloatVector inputData) -> FloatVector

        Parameters
        ----------
        inputData: std::vector< float,std::allocator< float > > const &

        """
        return _ELL.ELL_CompiledMap_ComputeFloat(self, inputData)

    __swig_destroy__ = _ELL.delete_ELL_CompiledMap
    __del__ = lambda self: None
ELL_CompiledMap_swigregister = _ELL.ELL_CompiledMap_swigregister
ELL_CompiledMap_swigregister(ELL_CompiledMap)


def ELL_LoadModel(filename: 'std::string') -> "ELL_API::ELL_Model":
    """
    ELL_LoadModel(std::string filename) -> ELL_Model

    Parameters
    ----------
    filename: std::string

    """
    return _ELL.ELL_LoadModel(filename)

def ELL_LoadModelFromString(str: 'std::string') -> "ELL_API::ELL_Model":
    """
    ELL_LoadModelFromString(std::string str) -> ELL_Model

    Parameters
    ----------
    str: std::string

    """
    return _ELL.ELL_LoadModelFromString(str)
# This file is compatible with both classic and new-style classes.


